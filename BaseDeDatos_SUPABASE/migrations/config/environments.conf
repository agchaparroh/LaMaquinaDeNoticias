# =====================================================
# CONFIGURACI√ìN DE ENTORNOS - M√ÅQUINA DE NOTICIAS
# =====================================================
# Archivo: environments.conf
# Prop√≥sito: Configuraciones espec√≠ficas por entorno
# Uso: source environments.conf && set_environment <env>

# =====================================================
# CONFIGURACIONES POR ENTORNO
# =====================================================

# Funci√≥n para configurar entorno de desarrollo
setup_development() {
    export MIGRATION_ENV="development"
    export PGHOST="${PGHOST:-localhost}"
    export PGPORT="${PGPORT:-5432}"
    export PGDATABASE="${PGDATABASE:-maquina_noticias_dev}"
    export PGUSER="${PGUSER:-postgres}"
    
    # Configuraciones espec√≠ficas de desarrollo
    export MIGRATION_TIMEOUT=60
    export STOP_ON_ERROR=false
    export SKIP_VALIDATIONS=false
    export FORCE_CONTINUE=true
    export VERBOSE=true
    export BACKUP_BEFORE_DEPLOY=false
    export DRY_RUN=false
    
    echo "üõ†Ô∏è Entorno DEVELOPMENT configurado"
    echo "   Database: $PGDATABASE"
    echo "   Host: $PGHOST:$PGPORT"
    echo "   User: $PGUSER"
    echo "   Timeout: ${MIGRATION_TIMEOUT}s"
}

# Funci√≥n para configurar entorno de staging
setup_staging() {
    export MIGRATION_ENV="staging"
    export PGHOST="${PGHOST:-staging-db.internal}"
    export PGPORT="${PGPORT:-5432}"
    export PGDATABASE="${PGDATABASE:-maquina_noticias_staging}"
    export PGUSER="${PGUSER:-app_user}"
    
    # Configuraciones espec√≠ficas de staging
    export MIGRATION_TIMEOUT=300
    export STOP_ON_ERROR=true
    export SKIP_VALIDATIONS=false
    export FORCE_CONTINUE=false
    export VERBOSE=true
    export BACKUP_BEFORE_DEPLOY=true
    export DRY_RUN=false
    
    echo "üß™ Entorno STAGING configurado"
    echo "   Database: $PGDATABASE"
    echo "   Host: $PGHOST:$PGPORT"
    echo "   User: $PGUSER"
    echo "   Timeout: ${MIGRATION_TIMEOUT}s"
    echo "   Backup: Enabled"
}

# Funci√≥n para configurar entorno de producci√≥n
setup_production() {
    export MIGRATION_ENV="production"
    export PGHOST="${PGHOST:-prod-db.internal}"
    export PGPORT="${PGPORT:-5432}"
    export PGDATABASE="${PGDATABASE:-maquina_noticias_prod}"
    export PGUSER="${PGUSER:-app_user}"
    
    # Configuraciones espec√≠ficas de producci√≥n
    export MIGRATION_TIMEOUT=600
    export STOP_ON_ERROR=true
    export SKIP_VALIDATIONS=false
    export FORCE_CONTINUE=false
    export VERBOSE=false
    export BACKUP_BEFORE_DEPLOY=true
    export DRY_RUN=true  # SIEMPRE dry-run primero en producci√≥n
    
    echo "üöÄ Entorno PRODUCTION configurado"
    echo "   Database: $PGDATABASE"
    echo "   Host: $PGHOST:$PGPORT"
    echo "   User: $PGUSER"
    echo "   Timeout: ${MIGRATION_TIMEOUT}s"
    echo "   Backup: Enabled"
    echo "   ‚ö†Ô∏è  DRY_RUN activado por seguridad"
}

# Funci√≥n para configurar entorno de testing
setup_testing() {
    export MIGRATION_ENV="testing"
    export PGHOST="${PGHOST:-localhost}"
    export PGPORT="${PGPORT:-5432}"
    export PGDATABASE="${PGDATABASE:-maquina_noticias_test}"
    export PGUSER="${PGUSER:-test_user}"
    
    # Configuraciones espec√≠ficas de testing
    export MIGRATION_TIMEOUT=120
    export STOP_ON_ERROR=false
    export SKIP_VALIDATIONS=false
    export FORCE_CONTINUE=true
    export VERBOSE=true
    export BACKUP_BEFORE_DEPLOY=false
    export DRY_RUN=false
    
    echo "üß™ Entorno TESTING configurado"
    echo "   Database: $PGDATABASE"
    echo "   Host: $PGHOST:$PGPORT"
    echo "   User: $PGUSER"
    echo "   Timeout: ${MIGRATION_TIMEOUT}s"
}

# Funci√≥n para configurar entorno Supabase
setup_supabase() {
    export MIGRATION_ENV="supabase"
    export PGHOST="${SUPABASE_DB_HOST:-db.supabase.co}"
    export PGPORT="${SUPABASE_DB_PORT:-5432}"
    export PGDATABASE="${SUPABASE_DB_NAME:-postgres}"
    export PGUSER="${SUPABASE_DB_USER:-postgres}"
    export PGPASSWORD="${SUPABASE_DB_PASSWORD}"
    
    # Configuraciones espec√≠ficas de Supabase
    export MIGRATION_TIMEOUT=300
    export STOP_ON_ERROR=true
    export SKIP_VALIDATIONS=false
    export FORCE_CONTINUE=false
    export VERBOSE=true
    export BACKUP_BEFORE_DEPLOY=false  # Supabase maneja backups autom√°ticamente
    export DRY_RUN=false
    
    echo "‚òÅÔ∏è Entorno SUPABASE configurado"
    echo "   Database: $PGDATABASE"
    echo "   Host: $PGHOST:$PGPORT"
    echo "   User: $PGUSER"
    echo "   Project: ${SUPABASE_PROJECT_REF:-not_set}"
}

# =====================================================
# CONFIGURACIONES ESPEC√çFICAS POR TIPO DE MIGRACI√ìN
# =====================================================

# Configuraci√≥n para migraci√≥n inicial (primera vez)
setup_initial_migration() {
    export MIGRATION_TYPE="initial"
    export SKIP_VALIDATIONS=false
    export FORCE_CONTINUE=false
    export BACKUP_BEFORE_DEPLOY=true
    export VERBOSE=true
    
    echo "üèÅ Configuraci√≥n para MIGRACI√ìN INICIAL"
    echo "   Validaciones completas habilitadas"
    echo "   Backup obligatorio"
}

# Configuraci√≥n para migraci√≥n incremental
setup_incremental_migration() {
    export MIGRATION_TYPE="incremental"
    export SKIP_VALIDATIONS=false
    export FORCE_CONTINUE=true
    export BACKUP_BEFORE_DEPLOY=true
    export VERBOSE=false
    
    echo "üìà Configuraci√≥n para MIGRACI√ìN INCREMENTAL"
    echo "   Continuaci√≥n en errores menores habilitada"
}

# Configuraci√≥n para hotfix
setup_hotfix_migration() {
    export MIGRATION_TYPE="hotfix"
    export SKIP_VALIDATIONS=true  # Para rapidez en hotfixes
    export FORCE_CONTINUE=true
    export BACKUP_BEFORE_DEPLOY=true
    export VERBOSE=true
    export MIGRATION_TIMEOUT=60
    
    echo "üî• Configuraci√≥n para HOTFIX"
    echo "   Validaciones omitidas para rapidez"
    echo "   Timeout reducido a 60s"
}

# =====================================================
# VALIDACIONES DE ENTORNO
# =====================================================

# Funci√≥n para validar configuraci√≥n de entorno
validate_environment() {
    local env="${1:-$MIGRATION_ENV}"
    
    echo "üîç Validando configuraci√≥n de entorno: $env"
    
    # Validaciones b√°sicas
    if [[ -z "$PGDATABASE" ]]; then
        echo "‚ùå ERROR: PGDATABASE no est√° configurado"
        return 1
    fi
    
    if [[ -z "$PGUSER" ]]; then
        echo "‚ùå ERROR: PGUSER no est√° configurado"
        return 1
    fi
    
    # Validaciones espec√≠ficas por entorno
    case "$env" in
        "production")
            if [[ "$DRY_RUN" != "true" ]]; then
                echo "‚ö†Ô∏è ADVERTENCIA: DRY_RUN no est√° habilitado en producci√≥n"
                echo "   Ejecute: export DRY_RUN=false  # Solo despu√©s de dry-run exitoso"
            fi
            
            if [[ "$BACKUP_BEFORE_DEPLOY" != "true" ]]; then
                echo "‚ùå ERROR: BACKUP_BEFORE_DEPLOY debe estar habilitado en producci√≥n"
                return 1
            fi
            ;;
            
        "staging")
            if [[ "$BACKUP_BEFORE_DEPLOY" != "true" ]]; then
                echo "‚ö†Ô∏è ADVERTENCIA: Se recomienda backup en staging"
            fi
            ;;
            
        "supabase")
            if [[ -z "$SUPABASE_PROJECT_REF" ]]; then
                echo "‚ö†Ô∏è ADVERTENCIA: SUPABASE_PROJECT_REF no est√° configurado"
            fi
            
            if [[ -z "$PGPASSWORD" ]]; then
                echo "‚ùå ERROR: PGPASSWORD (Supabase) no est√° configurado"
                return 1
            fi
            ;;
    esac
    
    # Test de conexi√≥n
    if ! timeout 5 psql -c "SELECT 1;" &>/dev/null; then
        echo "‚ùå ERROR: No se puede conectar a la base de datos"
        echo "   Host: $PGHOST:$PGPORT"
        echo "   Database: $PGDATABASE"
        echo "   User: $PGUSER"
        return 1
    fi
    
    echo "‚úÖ Configuraci√≥n de entorno v√°lida"
    return 0
}

# =====================================================
# FUNCI√ìN PRINCIPAL DE CONFIGURACI√ìN
# =====================================================

set_environment() {
    local environment="$1"
    local migration_type="${2:-standard}"
    
    echo "‚öôÔ∏è Configurando entorno: $environment"
    
    case "$environment" in
        "dev"|"development")
            setup_development
            ;;
        "staging"|"stage")
            setup_staging
            ;;
        "prod"|"production")
            setup_production
            ;;
        "test"|"testing")
            setup_testing
            ;;
        "supabase")
            setup_supabase
            ;;
        *)
            echo "‚ùå ERROR: Entorno desconocido: $environment"
            echo "Entornos disponibles: development, staging, production, testing, supabase"
            return 1
            ;;
    esac
    
    # Configurar tipo de migraci√≥n
    case "$migration_type" in
        "initial")
            setup_initial_migration
            ;;
        "incremental")
            setup_incremental_migration
            ;;
        "hotfix")
            setup_hotfix_migration
            ;;
        "standard")
            echo "üìã Usando configuraci√≥n est√°ndar de migraci√≥n"
            ;;
        *)
            echo "‚ö†Ô∏è WARNING: Tipo de migraci√≥n desconocido: $migration_type"
            ;;
    esac
    
    # Validar configuraci√≥n
    if ! validate_environment "$environment"; then
        echo "‚ùå ERROR: Configuraci√≥n de entorno inv√°lida"
        return 1
    fi
    
    echo "‚úÖ Entorno $environment configurado correctamente"
    return 0
}

# =====================================================
# FUNCIONES DE UTILIDAD
# =====================================================

# Mostrar configuraci√≥n actual
show_current_config() {
    echo "üìã Configuraci√≥n actual:"
    echo "   Entorno: ${MIGRATION_ENV:-not_set}"
    echo "   Host: ${PGHOST:-not_set}"
    echo "   Puerto: ${PGPORT:-not_set}"
    echo "   Database: ${PGDATABASE:-not_set}"
    echo "   Usuario: ${PGUSER:-not_set}"
    echo "   Timeout: ${MIGRATION_TIMEOUT:-not_set}s"
    echo "   Dry Run: ${DRY_RUN:-not_set}"
    echo "   Backup: ${BACKUP_BEFORE_DEPLOY:-not_set}"
    echo "   Stop on Error: ${STOP_ON_ERROR:-not_set}"
    echo "   Verbose: ${VERBOSE:-not_set}"
}

# Cambiar a modo de ejecuci√≥n real (solo producci√≥n)
enable_real_execution() {
    if [[ "$MIGRATION_ENV" == "production" ]]; then
        echo "‚ö†Ô∏è CAMBIANDO A MODO DE EJECUCI√ìN REAL EN PRODUCCI√ìN"
        echo "üö® Esta acci√≥n ejecutar√° cambios reales en la base de datos"
        echo "‚ùì ¬øEst√° seguro? Escriba 'CONFIRMAR EJECUCION REAL' para continuar:"
        
        read -r confirmation
        if [[ "$confirmation" == "CONFIRMAR EJECUCION REAL" ]]; then
            export DRY_RUN=false
            echo "‚úÖ Modo de ejecuci√≥n real habilitado"
        else
            echo "‚ùå Operaci√≥n cancelada"
            return 1
        fi
    else
        export DRY_RUN=false
        echo "‚úÖ Modo de ejecuci√≥n real habilitado para entorno $MIGRATION_ENV"
    fi
}

# =====================================================
# AYUDA
# =====================================================

show_environments_help() {
    cat << EOF
üåç CONFIGURACI√ìN DE ENTORNOS - M√ÅQUINA DE NOTICIAS

USO:
    source environments.conf
    set_environment <entorno> [tipo_migraci√≥n]

ENTORNOS DISPONIBLES:
    development     Entorno de desarrollo local
    staging         Entorno de staging/QA
    production      Entorno de producci√≥n (m√°xima seguridad)
    testing         Entorno de pruebas automatizadas
    supabase        Configuraci√≥n espec√≠fica para Supabase

TIPOS DE MIGRACI√ìN:
    standard        Migraci√≥n est√°ndar (default)
    initial         Primera migraci√≥n (validaciones completas)
    incremental     Migraci√≥n incremental (permite errores menores)
    hotfix          Hotfix r√°pido (validaciones m√≠nimas)

EJEMPLOS:
    # Configurar desarrollo
    set_environment development

    # Configurar producci√≥n con migraci√≥n inicial
    set_environment production initial

    # Configurar Supabase con hotfix
    set_environment supabase hotfix

FUNCIONES √öTILES:
    show_current_config         Mostrar configuraci√≥n actual
    validate_environment        Validar configuraci√≥n
    enable_real_execution       Habilitar ejecuci√≥n real (producci√≥n)

VARIABLES DE ENTORNO SUPABASE:
    SUPABASE_DB_HOST           Host de la base de datos
    SUPABASE_DB_PORT           Puerto de la base de datos  
    SUPABASE_DB_NAME           Nombre de la base de datos
    SUPABASE_DB_USER           Usuario de la base de datos
    SUPABASE_DB_PASSWORD       Password de la base de datos
    SUPABASE_PROJECT_REF       Referencia del proyecto

EOF
}

# Si se ejecuta directamente, mostrar ayuda
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    show_environments_help
fi
