# nginx.conf - Configuración para Dashboard La Máquina de Noticias
# Proxy reverso para Backend API + Frontend React

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging optimizado
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimization
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Compresión mejorada
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;
    
    # Rate limiting básico
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=300r/m;
    
    # Upstreams con health checks
    upstream dashboard_backend {
        server module_dashboard_review_backend:8004 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream dashboard_frontend {
        server module_dashboard_review_frontend:80 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }
    
    # Server principal
    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Health check interno de nginx
        location /nginx-health {
            access_log off;
            return 200 "nginx OK\n";
            add_header Content-Type text/plain;
        }
        
        # API Backend - con rate limiting
        location /api/ {
            # Rate limiting para API
            limit_req zone=api burst=20 nodelay;
            
            # Rewrite para quitar /api prefix
            rewrite ^/api/(.*) /$1 break;
            
            proxy_pass http://dashboard_backend;
            
            # Headers de proxy optimizados
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Timeouts optimizados para API
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Buffering optimizado
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # CORS headers para API
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Max-Age 86400 always;
            
            # Handle preflight requests
            if ($request_method = OPTIONS) {
                return 204;
            }
        }
        
        # Health check específico para backend
        location /api/health {
            access_log off;
            proxy_pass http://dashboard_backend/health;
            proxy_set_header Host $host;
        }
        
        # Frontend React App - SPA con fallback
        location / {
            # Rate limiting general
            limit_req zone=general burst=50 nodelay;
            
            proxy_pass http://dashboard_frontend;
            
            # Headers de proxy
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts para contenido estático
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Cache headers para recursos estáticos
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                proxy_pass http://dashboard_frontend;
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header X-Content-Type-Options nosniff;
            }
            
            # Fallback para SPA routing
            try_files $uri $uri/ @frontend_fallback;
        }
        
        # Fallback para React Router
        location @frontend_fallback {
            proxy_pass http://dashboard_frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Error pages personalizadas
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
        
        # Logs específicos para debugging
        access_log /var/log/nginx/dashboard_access.log main;
        error_log /var/log/nginx/dashboard_error.log warn;
    }
}
