# .github/workflows/ci-cd.yml
# CI/CD Pipeline para module_pipeline
# La M√°quina de Noticias - Pipeline Module

name: Module Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/module_pipeline/**'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/module_pipeline/**'

# Variables de entorno globales
env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  DOCKER_IMAGE_NAME: lamaquina/module-pipeline
  WORKING_DIRECTORY: ./src/module_pipeline

jobs:
  # === JOB 1: TESTING Y LINTING ===
  test:
    name: Tests and Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
    # === CHECKOUT ===
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    # === SETUP PYTHON ===
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    # === CACHE DEPENDENCIES ===
    - name: üì¶ Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # === INSTALL DEPENDENCIES ===
    - name: üìã Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Instalar herramientas de desarrollo
        pip install pytest-cov black flake8 mypy
    
    # === DOWNLOAD SPACY MODELS ===
    - name: üåê Download spaCy models
      run: |
        python -m spacy download es_core_news_sm  # Modelo m√°s peque√±o para CI
        python -m spacy download en_core_web_sm
    
    # === CODE FORMATTING CHECK ===
    - name: üé® Check code formatting with Black
      run: |
        black --check src/ tests/ || (echo "‚ùå Code not formatted. Run 'black src/ tests/'" && exit 1)
    
    # === LINTING ===
    - name: üîç Lint with flake8
      run: |
        # Configuraci√≥n b√°sica de flake8
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    # === TYPE CHECKING ===
    - name: üî¨ Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # mypy puede ser muy estricto
    
    # === UNIT TESTS ===
    - name: üß™ Run unit tests
      env:
        # Variables de entorno para tests (valores dummy)
        GROQ_API_KEY: "test_key_dummy"
        SUPABASE_URL: "https://test.supabase.co"
        SUPABASE_KEY: "test_key_dummy"
        LOG_LEVEL: "ERROR"  # Reducir logs en CI
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          -v
    
    # === UPLOAD COVERAGE ===
    - name: üìä Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./src/module_pipeline/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # === JOB 2: SECURITY SCAN ===
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    # === SECURITY SCAN WITH SAFETY ===
    - name: üîí Run safety check
      run: |
        pip install safety
        safety check --json || true  # No fallar por vulnerabilidades menores
    
    # === DEPENDENCY SCAN ===
    - name: üîç Dependency review
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'

  # === JOB 3: DOCKER BUILD ===
  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [test]
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    # === DOCKER SETUP ===
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # === BUILD DOCKER IMAGE ===
    - name: üèóÔ∏è Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:test .
    
    # === TEST DOCKER IMAGE ===
    - name: üß™ Test Docker image
      run: |
        # Ejecutar contenedor en background
        docker run -d --name pipeline-test \
          -p 8003:8003 \
          -e GROQ_API_KEY="test_dummy" \
          -e SUPABASE_URL="https://test.supabase.co" \
          -e SUPABASE_KEY="test_dummy" \
          -e LOG_LEVEL="ERROR" \
          ${{ env.DOCKER_IMAGE_NAME }}:test
        
        # Esperar que el servicio inicie
        sleep 30
        
        # Verificar health check
        docker exec pipeline-test curl -f http://localhost:8003/health || exit 1
        
        # Limpiar
        docker stop pipeline-test
        docker rm pipeline-test

  # === JOB 4: DEPLOY (SOLO EN MAIN) ===
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment: production
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    # === DOCKER LOGIN ===
    - name: üîê Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    # === BUILD AND PUSH ===
    - name: üöÄ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.WORKING_DIRECTORY }}
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # === DEPLOY TO STAGING (ejemplo) ===
    - name: üéØ Deploy to staging
      run: |
        echo "üöÄ Desplegando a staging..."
        # Aqu√≠ ir√≠an los comandos de despliegue real
        # Por ejemplo: kubectl, docker-compose, terraform, etc.
        echo "‚úÖ Despliegue completado"

  # === JOB 5: NOTIFY ===
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, security, docker, deploy]
    if: always()
    
    steps:
    - name: üì¢ Notify success
      if: ${{ needs.test.result == 'success' && needs.docker.result == 'success' }}
      run: |
        echo "‚úÖ Pipeline completado exitosamente"
        # Aqu√≠ se puede agregar notificaci√≥n a Slack, Discord, etc.
    
    - name: üì¢ Notify failure
      if: ${{ needs.test.result == 'failure' || needs.docker.result == 'failure' }}
      run: |
        echo "‚ùå Pipeline fall√≥. Revisar logs."
        # Aqu√≠ se puede agregar notificaci√≥n de error

# === CONFIGURACIONES ADICIONALES ===

# Permisos requeridos
permissions:
  contents: read
  security-events: write
  actions: read

# Configuraci√≥n de concurrencia
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
