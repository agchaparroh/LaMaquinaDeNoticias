#!/usr/bin/env python3
"""
Configuraci√≥n centralizada integrada con setup_env.py
===================================================

Este script verifica que:
1. Python y pip est√°n disponibles
2. Las dependencias se pueden instalar
3. Los directorios necesarios existen
4. Las variables de entorno b√°sicas est√°n configuradas
5. LA CONFIGURACI√ìN CENTRALIZADA FUNCIONA CORRECTAMENTE
"""

import os
import sys
import subprocess
from pathlib import Path


def check_python_version():
    """Verificar que la versi√≥n de Python es compatible."""
    print("üêç Verificando versi√≥n de Python...")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå Error: Se requiere Python 3.8+, encontrado {version.major}.{version.minor}")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - Compatible")
    return True


def check_virtual_environment():
    """Verificar si estamos en un entorno virtual."""
    print("\nüîß Verificando entorno virtual...")
    
    in_venv = hasattr(sys, 'real_prefix') or (
        hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix
    )
    
    if in_venv:
        print("‚úÖ Entorno virtual activo")
        return True
    else:
        print("‚ö†Ô∏è  No se detect√≥ entorno virtual activo")
        print("   Recomendaci√≥n: crear y activar un entorno virtual")
        return False


def check_dependencies():
    """Verificar si las dependencias cr√≠ticas est√°n instaladas."""
    print("\nüì¶ Verificando dependencias cr√≠ticas...")
    
    critical_deps = [
        'fastapi',
        'uvicorn',
        'pydantic',
        'python-dotenv',
        'loguru',
        'groq',
        'supabase'
    ]
    
    missing_deps = []
    
    for dep in critical_deps:
        try:
            __import__(dep.replace('-', '_'))
            print(f"‚úÖ {dep}")
        except ImportError:
            print(f"‚ùå {dep}")
            missing_deps.append(dep)
    
    if missing_deps:
        print(f"\n‚ö†Ô∏è  Dependencias faltantes: {', '.join(missing_deps)}")
        print("   Ejecutar: pip install -r requirements.txt")
        return False
    
    return True


def check_directory_structure():
    """Verificar que la estructura de directorios existe."""
    print("\nüìÅ Verificando estructura de directorios...")
    
    required_dirs = [
        'src',
        'src/models',
        'src/phases',
        'src/services',
        'src/utils',
        'src/api',
        'prompts',
        'logs',
        'tests',
        'models'
    ]
    
    missing_dirs = []
    
    for dir_path in required_dirs:
        full_path = Path(dir_path)
        if full_path.exists():
            print(f"‚úÖ {dir_path}/")
        else:
            print(f"‚ùå {dir_path}/")
            missing_dirs.append(dir_path)
    
    if missing_dirs:
        print(f"\n‚ö†Ô∏è  Directorios faltantes: {', '.join(missing_dirs)}")
        return False
    
    return True


def check_env_file():
    """Verificar que existe el archivo .env."""
    print("\nüîß Verificando archivo de configuraci√≥n...")
    
    env_file = Path('.env')
    if env_file.exists():
        print("‚úÖ Archivo .env encontrado")
        
        # Verificar variables cr√≠ticas
        try:
            from dotenv import load_dotenv
            load_dotenv()
            
            critical_vars = ['GROQ_API_KEY', 'SUPABASE_URL', 'SUPABASE_KEY']
            missing_vars = []
            
            for var in critical_vars:
                value = os.getenv(var)
                if value and value != f"your_{var.lower()}_here" and not value.startswith('your_'):
                    print(f"‚úÖ {var} configurado")
                else:
                    print(f"‚ö†Ô∏è  {var} no configurado")
                    missing_vars.append(var)
            
            if missing_vars:
                print(f"\n‚ö†Ô∏è  Variables de entorno pendientes: {', '.join(missing_vars)}")
                print("   Editar .env con las claves reales")
                return False
            
        except ImportError:
            print("‚ö†Ô∏è  python-dotenv no instalado, no se pueden verificar variables")
            return False
            
        return True
    else:
        print("‚ùå Archivo .env no encontrado")
        print("   Ejecutar: cp .env.example .env")
        return False


def check_prompts():
    """Verificar que los prompts est√°n disponibles."""
    print("\nüìù Verificando prompts...")
    
    prompt_files = [
        'prompts/Prompt_1_filtrado.md',
        'prompts/Prompt_2_elementos_basicos.md',
        'prompts/Prompt_3_citas_datos.md',
        'prompts/Prompt_4_relaciones.md'
    ]
    
    missing_prompts = []
    
    for prompt_file in prompt_files:
        full_path = Path(prompt_file)
        if full_path.exists():
            print(f"‚úÖ {prompt_file}")
        else:
            print(f"‚ùå {prompt_file}")
            missing_prompts.append(prompt_file)
    
    if missing_prompts:
        print(f"\n‚ö†Ô∏è  Prompts faltantes: {', '.join(missing_prompts)}")
        return False
    
    return True


def check_centralized_config():
    """Verificar que la configuraci√≥n centralizada funciona."""
    print("\n‚öôÔ∏è  Verificando configuraci√≥n centralizada...")
    
    try:
        # A√±adir src al path
        sys.path.insert(0, str(Path.cwd() / 'src'))
        
        # Intentar importar la configuraci√≥n
        from utils.config import (
            GROQ_API_KEY, SUPABASE_URL, SUPABASE_KEY,
            validate_configuration, get_groq_config
        )
        
        print("‚úÖ M√≥dulo de configuraci√≥n importado correctamente")
        
        # Validar configuraci√≥n
        is_valid = validate_configuration()
        if is_valid:
            print("‚úÖ Configuraci√≥n centralizada v√°lida")
        else:
            print("‚ùå Configuraci√≥n centralizada inv√°lida")
            return False
        
        # Verificar funciones de configuraci√≥n
        groq_config = get_groq_config()
        if groq_config and groq_config.get('api_key'):
            print("‚úÖ Funciones de configuraci√≥n funcionando")
        else:
            print("‚ùå Funciones de configuraci√≥n fallando")
            return False
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Error importando configuraci√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n centralizada: {e}")
        return False


def main():
    """Funci√≥n principal del script."""
    print("üöÄ Configuraci√≥n inicial - Module Pipeline")
    print("=" * 50)
    
    checks = [
        ("Versi√≥n de Python", check_python_version),
        ("Entorno Virtual", check_virtual_environment),
        ("Dependencias", check_dependencies),
        ("Estructura de Directorios", check_directory_structure),
        ("Archivo de Configuraci√≥n", check_env_file),
        ("Prompts", check_prompts),
        ("Configuraci√≥n Centralizada", check_centralized_config),  # ‚Üê NUEVO
    ]
    
    results = []
    
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Error en {name}: {e}")
            results.append((name, False))
    
    # Resumen final
    print("\n" + "=" * 50)
    print("üìã RESUMEN DE VERIFICACI√ìN")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ CORRECTO" if result else "‚ùå PENDIENTE"
        print(f"{name:.<30} {status}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{total} verificaciones pasaron")
    
    if passed == total:
        print("\nüéâ ¬°Configuraci√≥n completa! El module_pipeline est√° listo.")
        print("\nüìù Pr√≥ximos pasos:")
        print("1. Ejecutar: python test_config.py (prueba configuraci√≥n)")
        print("2. Proceder con Tarea 4 (modelos Pydantic)")
        print("3. Implementar servicios y fases del pipeline")
    else:
        print("\n‚ö†Ô∏è  Configuraci√≥n incompleta. Revisar elementos pendientes.")
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
