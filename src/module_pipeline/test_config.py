#!/usr/bin/env python3
"""
Script de prueba para la configuraci√≥n centralizada
==================================================

Verifica que todas las variables de configuraci√≥n se cargan correctamente
y que la validaci√≥n funciona como esperado.
"""

import sys
import os
from pathlib import Path

# A√±adir src al path para imports
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

def test_configuration():
    """Prueba la configuraci√≥n centralizada."""
    print("üß™ TESTING CONFIGURACI√ìN CENTRALIZADA")
    print("=" * 50)
    
    try:
        # Importar configuraci√≥n
        print("üì¶ Importando m√≥dulo de configuraci√≥n...")
        from utils.config import (
            # Variables cr√≠ticas
            GROQ_API_KEY, SUPABASE_URL, SUPABASE_KEY,
            # Configuraci√≥n de servidor
            API_HOST, API_PORT, DEBUG_MODE,
            # Funciones de utilidad
            get_groq_config, get_supabase_config, get_server_config,
            validate_configuration, print_configuration_summary
        )
        print("‚úÖ Importaci√≥n exitosa")
        
        # Mostrar resumen de configuraci√≥n
        print("\nüìã Resumen de configuraci√≥n:")
        print_configuration_summary()
        
        # Validar configuraci√≥n
        print("\nüîç Validando configuraci√≥n...")
        is_valid = validate_configuration()
        
        if is_valid:
            print("‚úÖ Configuraci√≥n v√°lida")
        else:
            print("‚ùå Configuraci√≥n inv√°lida")
            return False
        
        # Probar funciones de configuraci√≥n
        print("\nüîß Probando funciones de configuraci√≥n...")
        
        groq_config = get_groq_config()
        print(f"‚úÖ Groq config: modelo={groq_config['model_id']}, timeout={groq_config['timeout']}s")
        
        supabase_config = get_supabase_config()
        print(f"‚úÖ Supabase config: URL configurada, pool_size={supabase_config['pool_size']}")
        
        server_config = get_server_config()
        print(f"‚úÖ Server config: {server_config['host']}:{server_config['port']}, workers={server_config['workers']}")
        
        # Verificar variables cr√≠ticas (sin mostrar valores completos por seguridad)
        print("\nüîë Verificando variables cr√≠ticas:")
        
        if GROQ_API_KEY:
            print(f"‚úÖ GROQ_API_KEY: {GROQ_API_KEY[:8]}...{GROQ_API_KEY[-4:]}")
        else:
            print("‚ùå GROQ_API_KEY no configurada")
            return False
            
        if SUPABASE_URL:
            print(f"‚úÖ SUPABASE_URL: {SUPABASE_URL}")
        else:
            print("‚ùå SUPABASE_URL no configurada")
            return False
            
        if SUPABASE_KEY:
            print(f"‚úÖ SUPABASE_KEY: {SUPABASE_KEY[:8]}...{SUPABASE_KEY[-4:]}")
        else:
            print("‚ùå SUPABASE_KEY no configurada")
            return False
        
        print("\nüéâ ¬°Todas las pruebas de configuraci√≥n exitosas!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def test_environment_variables():
    """Prueba que las variables de entorno se est√°n leyendo correctamente."""
    print("\nüåç TESTING VARIABLES DE ENTORNO")
    print("=" * 40)
    
    critical_vars = ['GROQ_API_KEY', 'SUPABASE_URL', 'SUPABASE_KEY']
    optional_vars = ['API_HOST', 'API_PORT', 'DEBUG_MODE', 'LOG_LEVEL']
    
    print("Variables cr√≠ticas:")
    for var in critical_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: configurada")
        else:
            print(f"‚ùå {var}: NO configurada")
    
    print("\nVariables opcionales:")
    for var in optional_vars:
        value = os.getenv(var)
        print(f"{'‚úÖ' if value else '‚ÑπÔ∏è '} {var}: {value or 'default'}")

def main():
    """Funci√≥n principal de testing."""
    success = True
    
    # Test 1: Variables de entorno
    test_environment_variables()
    
    # Test 2: Configuraci√≥n centralizada
    config_success = test_configuration()
    success = success and config_success
    
    # Resultado final
    print("\n" + "=" * 50)
    print("üìä RESULTADO FINAL")
    print("=" * 50)
    
    if success:
        print("üéâ ¬°Configuraci√≥n centralizada funcionando correctamente!")
        print("\nüìù Pr√≥ximos pasos:")
        print("1. Proceder con implementaci√≥n de modelos Pydantic")
        print("2. Configurar servicios de integraci√≥n (Groq, Supabase)")
        print("3. Implementar fases del pipeline")
        return 0
    else:
        print("‚ùå Problemas detectados en la configuraci√≥n")
        print("\nüîß Acciones requeridas:")
        print("1. Verificar variables de entorno en .env")
        print("2. Revisar estructura de directorios")
        print("3. Corregir errores reportados arriba")
        return 1

if __name__ == "__main__":
    sys.exit(main())
