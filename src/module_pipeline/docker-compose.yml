# docker-compose.yml for module_pipeline
# Configuración CORREGIDA basada en funcionalidades REALES verificadas

version: '3.8'

services:
  # === SERVICIO PRINCIPAL: MODULE_PIPELINE ===
  module-pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lamaquina-pipeline
    restart: unless-stopped
    
    # === PUERTOS ===
    ports:
      - "8003:8003"  # FastAPI pipeline service
    
    # === VARIABLES DE ENTORNO ===
    environment:
      # API Configuration
      - PIPELINE_API_HOST=0.0.0.0
      - PIPELINE_API_PORT=8003
      - DEBUG_MODE=false
      - LOG_LEVEL=INFO
      
      # CORS para desarrollo
      - CORS_ORIGINS=["http://localhost:3000","http://localhost:8002","http://localhost:8001"]
      
      # Configuración de workers
      - WORKER_COUNT=3
      - QUEUE_MAX_SIZE=100
      
      # Límites de contenido
      - MIN_CONTENT_LENGTH=100
      - MAX_CONTENT_LENGTH=50000
      
      # Configuración de Groq (usar .env file)
      - GROQ_API_KEY=${GROQ_API_KEY}
      - MODEL_ID=llama-3.1-8b-instant
      - API_TIMEOUT=60
      - API_TEMPERATURE=0.1
      - API_MAX_TOKENS=4000
      - MAX_RETRIES=2
      
      # Configuración de Supabase (usar .env file)
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # Configuraciones opcionales
      - USE_SPACY_FILTER=false
      - STORE_METRICS=true
      - ENABLE_DETAILED_LOGGING=false
      - ENABLE_NOTIFICATIONS=false
    
    # === ARCHIVOS DE ENTORNO ===
    env_file:
      - .env  # Variables sensibles como API keys
    
    # === VOLÚMENES ===
    volumes:
      # Logs persistentes
      - ./logs:/app/logs
      # Métricas persistentes
      - ./metrics:/app/metrics
      # Prompts (solo lectura)
      - ./prompts:/app/prompts:ro
      # Scripts de utilidad
      - ./scripts:/app/scripts:ro
    
    # === HEALTH CHECK ===
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # === REDES ===
    networks:
      - lamaquina-network

  # === SERVICIO DE MONITOREO (PROMETHEUS) ===
  monitoring:
    image: prom/prometheus:latest
    container_name: lamaquina-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"  # Prometheus UI
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    depends_on:
      - module-pipeline
    
    networks:
      - lamaquina-network

# === VOLÚMENES PERSISTENTES ===
volumes:
  prometheus-data:
    driver: local

# === REDES ===
networks:
  lamaquina-network:
    driver: bridge
    name: lamaquina-network

# === CONFIGURACIONES ADICIONALES ===
# Para usar este docker-compose:
#
# 1. DESARROLLO BÁSICO:
#   docker-compose up -d module-pipeline
#
# 2. DESARROLLO CON MONITOREO:
#   docker-compose up -d
#
# 3. LOGS:
#   docker-compose logs -f module-pipeline
#
# 4. HEALTH CHECK:
#   curl http://localhost:8003/health
#
# 5. MÉTRICAS:
#   curl http://localhost:8003/metrics
#
# 6. MONITORING:
#   Prometheus: http://localhost:9090
#
# NOTAS IMPORTANTES:
# - Crear archivo .env con las API keys requeridas
# - Los directorios logs/ y metrics/ se crearán automáticamente
# - Configurar firewall apropiadamente en producción
