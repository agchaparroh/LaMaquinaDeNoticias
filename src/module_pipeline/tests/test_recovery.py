"""
Test de Recuperaci√≥n del Pipeline
=================================

Tests que verifican la capacidad del sistema para recuperarse de fallos:
- Recuperaci√≥n ante fallos de Groq API
- Recuperaci√≥n ante fallos de Supabase
- Recuperaci√≥n ante problemas de memoria
- Funcionamiento del circuit breaker
- Resiliencia general del sistema

Ejecutar con: python -m pytest tests/test_recovery.py -v -s

NOTA: Estos tests simulan condiciones de fallo y pueden generar logs de error.
"""

import pytest
import asyncio
import aiohttp
import time
import psutil
import gc
import random
from unittest.mock import Mock, patch, AsyncMock
from typing import Dict, Any, List
from dataclasses import dataclass, field
from pathlib import Path
import json

# Configuraci√≥n del sistema
import sys
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from src.utils.config import API_HOST, API_PORT
from src.utils.error_handling import (
    GroqAPIError,
    SupabaseRPCError,
    ServiceUnavailableError,
    ProcessingError,
    ErrorPhase
)


@dataclass
class RecoveryTestResult:
    """Resultado de un test de recuperaci√≥n."""
    test_name: str
    total_attempts: int = 0
    successful_recoveries: int = 0
    failed_recoveries: int = 0
    recovery_times: List[float] = field(default_factory=list)
    error_sequences: List[Dict[str, Any]] = field(default_factory=list)
    system_state_changes: List[str] = field(default_factory=list)
    
    def add_recovery_attempt(self, success: bool, recovery_time: float, details: Dict[str, Any] = None):
        """Registra un intento de recuperaci√≥n."""
        self.total_attempts += 1
        self.recovery_times.append(recovery_time)
        
        if success:
            self.successful_recoveries += 1
        else:
            self.failed_recoveries += 1
        
        if details:
            self.error_sequences.append({
                "timestamp": time.time(),
                "success": success,
                "recovery_time": recovery_time,
                "details": details
            })
    
    def calculate_recovery_rate(self) -> float:
        """Calcula la tasa de recuperaci√≥n exitosa."""
        if self.total_attempts == 0:
            return 0.0
        return (self.successful_recoveries / self.total_attempts) * 100
    
    def get_average_recovery_time(self) -> float:
        """Calcula el tiempo promedio de recuperaci√≥n."""
        if not self.recovery_times:
            return 0.0
        return sum(self.recovery_times) / len(self.recovery_times)
    
    def print_summary(self):
        """Imprime un resumen del resultado."""
        print(f"\n{'='*60}")
        print(f"RESUMEN: {self.test_name}")
        print(f"{'='*60}")
        print(f"Total intentos:        {self.total_attempts}")
        print(f"Recuperaciones exitosas: {self.successful_recoveries} ({self.calculate_recovery_rate():.1f}%)")
        print(f"Recuperaciones fallidas: {self.failed_recoveries}")
        print(f"Tiempo promedio recuperaci√≥n: {self.get_average_recovery_time():.2f}s")
        
        if self.system_state_changes:
            print(f"\nCambios de estado del sistema:")
            for change in self.system_state_changes[:5]:  # Mostrar solo primeros 5
                print(f"  - {change}")
        
        print(f"{'='*60}")


class TestRecovery:
    """Suite de tests de recuperaci√≥n del pipeline."""
    
    @pytest.fixture(scope="class")
    def api_base_url(self):
        """URL base del API."""
        return f"http://{API_HOST}:{API_PORT}"
    
    @pytest.fixture
    def sample_article(self):
        """Art√≠culo de muestra para tests."""
        return {
            "medio": "Recovery Test News",
            "pais_publicacion": "Espa√±a",
            "tipo_medio": "Digital",
            "titular": "Test de Recuperaci√≥n del Sistema",
            "fecha_publicacion": "2024-01-15T10:00:00Z",
            "contenido_texto": "Este es un art√≠culo de prueba para verificar la recuperaci√≥n del sistema. " * 20,
            "idioma": "es",
            "autor": "Recovery Tester",
            "url": "https://test.example.com/recovery",
            "seccion": "Testing",
            "es_opinion": False,
            "es_oficial": True
        }
    
    @pytest.fixture
    def sample_fragment(self):
        """Fragmento de muestra para tests."""
        return {
            "id_fragmento": "test_recovery_001",
            "texto_original": "Fragmento de prueba para verificar recuperaci√≥n ante fallos. " * 10,
            "id_articulo_fuente": "recovery_test_article_001",
            "orden_en_articulo": 1,
            "metadata_adicional": {"test_type": "recovery"}
        }
    
    async def _send_request_with_retry(self, url: str, data: Dict[str, Any], max_retries: int = 3) -> Dict[str, Any]:
        """Env√≠a una request con reintentos autom√°ticos."""
        for attempt in range(max_retries):
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post(url, json=data, timeout=aiohttp.ClientTimeout(total=30)) as response:
                        return {
                            "status": response.status,
                            "data": await response.json(),
                            "attempt": attempt + 1
                        }
            except Exception as e:
                if attempt == max_retries - 1:
                    raise
                await asyncio.sleep(2 ** attempt)  # Backoff exponencial
    
    @pytest.mark.asyncio
    @patch('src.services.groq_service.GroqService.generate_completion')
    async def test_recuperacion_fallo_groq(self, mock_groq, api_base_url, sample_article):
        """
        Test 1: Recuperaci√≥n ante fallos de Groq API.
        
        Simula fallos intermitentes de Groq y verifica que el sistema
        se recupera correctamente usando reintentos y fallbacks.
        """
        print("\n" + "="*80)
        print("TEST 1: RECUPERACI√ìN ANTE FALLOS DE GROQ API")
        print("="*80)
        
        result = RecoveryTestResult("Recuperaci√≥n Groq API")
        
        # Configurar comportamiento del mock
        call_count = 0
        def groq_side_effect(*args, **kwargs):
            nonlocal call_count
            call_count += 1
            
            # Fallar las primeras 2 llamadas, luego funcionar
            if call_count <= 2:
                raise GroqAPIError(
                    message="API rate limit exceeded",
                    phase=ErrorPhase.EXTERNAL_SERVICE,
                    service_name="groq",
                    retry_count=call_count,
                    max_retries=2
                )
            
            # Respuesta exitosa
            return {
                "choices": [{
                    "message": {
                        "content": json.dumps({
                            "hechos": [{"hecho": "Test exitoso"}],
                            "entidades": [{"nombre": "Sistema", "tipo": "ORGANIZACION"}]
                        })
                    }
                }]
            }
        
        mock_groq.side_effect = groq_side_effect
        
        # Test 1.1: Enviar art√≠culo con Groq fallando inicialmente
        print("\nüîÑ Test 1.1: Fallo inicial de Groq con recuperaci√≥n")
        
        start_time = time.time()
        
        try:
            response = await self._send_request_with_retry(
                f"{api_base_url}/procesar_articulo",
                sample_article
            )
            
            recovery_time = time.time() - start_time
            
            if response["status"] == 200:
                print(f"  ‚úÖ Sistema se recuper√≥ despu√©s de {call_count} intentos")
                print(f"  ‚è±Ô∏è  Tiempo de recuperaci√≥n: {recovery_time:.2f}s")
                result.add_recovery_attempt(True, recovery_time, {
                    "attempts": call_count,
                    "final_status": response["status"]
                })
            else:
                print(f"  ‚ùå Sistema no se recuper√≥ completamente")
                result.add_recovery_attempt(False, recovery_time)
                
        except Exception as e:
            recovery_time = time.time() - start_time
            print(f"  ‚ùå Fallo total: {str(e)}")
            result.add_recovery_attempt(False, recovery_time, {"error": str(e)})
        
        # Test 1.2: Verificar que el sistema est√° operativo despu√©s del fallo
        print("\nüîÑ Test 1.2: Verificaci√≥n post-recuperaci√≥n")
        
        # Reset mock para funcionar normalmente
        mock_groq.side_effect = None
        mock_groq.return_value = {
            "choices": [{
                "message": {
                    "content": json.dumps({
                        "hechos": [{"hecho": "Sistema recuperado"}],
                        "entidades": []
                    })
                }
            }]
        }
        
        # Enviar request normal
        verification_start = time.time()
        
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{api_base_url}/procesar_articulo", json=sample_article) as response:
                verification_time = time.time() - verification_start
                
                if response.status == 200:
                    print(f"  ‚úÖ Sistema operativo post-recuperaci√≥n")
                    print(f"  ‚è±Ô∏è  Tiempo de respuesta normal: {verification_time:.2f}s")
                    result.system_state_changes.append("Sistema recuperado y operativo")
                else:
                    print(f"  ‚ùå Sistema a√∫n degradado")
                    result.system_state_changes.append("Sistema no completamente recuperado")
        
        # Test 1.3: Fallo persistente de Groq
        print("\nüîÑ Test 1.3: Fallo persistente de Groq (sin recuperaci√≥n)")
        
        # Configurar mock para fallar siempre
        mock_groq.side_effect = GroqAPIError(
            message="Service permanently unavailable",
            phase=ErrorPhase.EXTERNAL_SERVICE,
            service_name="groq"
        )
        
        persistent_start = time.time()
        
        try:
            response = await self._send_request_with_retry(
                f"{api_base_url}/procesar_articulo",
                sample_article,
                max_retries=2
            )
            
            # Si llegamos aqu√≠, el sistema tiene un fallback
            if response["status"] == 200:
                print(f"  ‚úÖ Sistema us√≥ fallback exitosamente")
                result.add_recovery_attempt(True, time.time() - persistent_start, {
                    "method": "fallback",
                    "status": response["status"]
                })
            else:
                print(f"  ‚ö†Ô∏è  Respuesta degradada: HTTP {response['status']}")
                result.add_recovery_attempt(False, time.time() - persistent_start)
                
        except Exception as e:
            print(f"  ‚ùå Fallo esperado sin fallback: {type(e).__name__}")
            result.add_recovery_attempt(False, time.time() - persistent_start, {
                "expected_failure": True,
                "error_type": type(e).__name__
            })
        
        result.print_summary()
        
        # Assertions
        assert result.successful_recoveries > 0, "No hubo recuperaciones exitosas"
        assert result.get_average_recovery_time() < 30, "Tiempo de recuperaci√≥n muy alto"
    
    @pytest.mark.asyncio
    @patch('src.services.supabase_service.SupabaseService.call_rpc')
    async def test_recuperacion_fallo_supabase(self, mock_supabase, api_base_url, sample_fragment):
        """
        Test 2: Recuperaci√≥n ante fallos de Supabase.
        
        Simula fallos de conexi√≥n y errores RPC de Supabase.
        """
        print("\n" + "="*80)
        print("TEST 2: RECUPERACI√ìN ANTE FALLOS DE SUPABASE")
        print("="*80)
        
        result = RecoveryTestResult("Recuperaci√≥n Supabase")
        
        # Test 2.1: Fallo temporal de conexi√≥n
        print("\nüîÑ Test 2.1: Fallo temporal de conexi√≥n a Supabase")
        
        call_count = 0
        def supabase_connection_error(*args, **kwargs):
            nonlocal call_count
            call_count += 1
            
            # Fallar las primeras 3 llamadas
            if call_count <= 3:
                raise SupabaseRPCError(
                    message="Connection timeout",
                    phase=ErrorPhase.EXTERNAL_SERVICE,
                    rpc_name=args[0] if args else "unknown",
                    is_connection_error=True
                )
            
            # Luego funcionar normalmente
            return {"data": {"success": True, "id": f"recovered_{call_count}"}}
        
        mock_supabase.side_effect = supabase_connection_error
        
        start_time = time.time()
        
        try:
            response = await self._send_request_with_retry(
                f"{api_base_url}/procesar_fragmento",
                sample_fragment
            )
            
            recovery_time = time.time() - start_time
            
            if response["status"] == 200:
                print(f"  ‚úÖ Recuperaci√≥n exitosa despu√©s de {call_count} intentos")
                result.add_recovery_attempt(True, recovery_time, {"attempts": call_count})
            else:
                print(f"  ‚ùå No se pudo recuperar completamente")
                result.add_recovery_attempt(False, recovery_time)
                
        except Exception as e:
            recovery_time = time.time() - start_time
            print(f"  ‚ùå Fallo en recuperaci√≥n: {str(e)}")
            result.add_recovery_attempt(False, recovery_time)
        
        # Test 2.2: Error de validaci√≥n RPC (no recuperable)
        print("\nüîÑ Test 2.2: Error de validaci√≥n RPC (no recuperable)")
        
        mock_supabase.side_effect = SupabaseRPCError(
            message="Invalid input data",
            phase=ErrorPhase.EXTERNAL_SERVICE,
            rpc_name="insertar_fragmento_completo",
            is_connection_error=False,
            validation_errors=["Campo 'texto' muy corto"]
        )
        
        validation_start = time.time()
        
        try:
            # Este error no deber√≠a ser recuperable
            response = await self._send_request_with_retry(
                f"{api_base_url}/procesar_fragmento",
                sample_fragment,
                max_retries=1
            )
            
            # Si obtenemos respuesta, verificar que sea un error
            if response["status"] >= 400:
                print(f"  ‚úÖ Error de validaci√≥n manejado correctamente (HTTP {response['status']})")
                result.system_state_changes.append("Error de validaci√≥n no recuperable detectado")
            else:
                print(f"  ‚ö†Ô∏è  Respuesta inesperada para error de validaci√≥n")
                
        except Exception as e:
            print(f"  ‚úÖ Error de validaci√≥n propagado correctamente: {type(e).__name__}")
            result.system_state_changes.append(f"Error de validaci√≥n: {str(e)}")
        
        # Test 2.3: Degradaci√≥n gradual y recuperaci√≥n
        print("\nüîÑ Test 2.3: Degradaci√≥n gradual y recuperaci√≥n")
        
        degradation_levels = [0.1, 0.3, 0.5, 0.7, 0.9, 0.5, 0.2, 0.0]  # Probabilidad de fallo
        
        for i, failure_prob in enumerate(degradation_levels):
            mock_supabase.side_effect = lambda *args, **kwargs: (
                {"data": {"success": True, "id": f"test_{i}"}}
                if random.random() > failure_prob
                else (_ for _ in ()).throw(SupabaseRPCError(
                    message="Random failure",
                    phase=ErrorPhase.EXTERNAL_SERVICE,
                    rpc_name="test_rpc"
                ))
            )
            
            try:
                response = await self._send_request_with_retry(
                    f"{api_base_url}/procesar_fragmento",
                    sample_fragment,
                    max_retries=2
                )
                
                if response["status"] == 200:
                    result.system_state_changes.append(f"Nivel {i}: √âxito (prob fallo: {failure_prob})")
                else:
                    result.system_state_changes.append(f"Nivel {i}: Degradado (prob fallo: {failure_prob})")
                    
            except:
                result.system_state_changes.append(f"Nivel {i}: Fallo total (prob fallo: {failure_prob})")
        
        result.print_summary()
        
        # Assertions
        assert result.total_attempts > 0, "No se realizaron intentos de recuperaci√≥n"
        assert len(result.system_state_changes) > 0, "No se registraron cambios de estado"
    
    @pytest.mark.asyncio
    async def test_recuperacion_memoria(self, api_base_url, sample_article):
        """
        Test 3: Recuperaci√≥n ante problemas de memoria.
        
        Env√≠a art√≠culos muy grandes para estresar la memoria y verifica
        que el sistema se recupera correctamente.
        """
        print("\n" + "="*80)
        print("TEST 3: RECUPERACI√ìN ANTE PROBLEMAS DE MEMORIA")
        print("="*80)
        
        result = RecoveryTestResult("Recuperaci√≥n Memoria")
        
        # Obtener uso de memoria inicial
        process = psutil.Process()
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        print(f"üìä Memoria inicial: {initial_memory:.1f} MB")
        
        # Test 3.1: Art√≠culo extremadamente grande
        print("\nüîÑ Test 3.1: Procesamiento de art√≠culo muy grande")
        
        # Crear art√≠culo de 1MB
        huge_content = "x" * (1024 * 1024)
        huge_article = sample_article.copy()
        huge_article["contenido_texto"] = huge_content
        huge_article["titular"] = "Art√≠culo gigante para test de memoria"
        
        start_time = time.time()
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{api_base_url}/procesar_articulo",
                    json=huge_article,
                    timeout=aiohttp.ClientTimeout(total=60)
                ) as response:
                    response_data = await response.json()
                    recovery_time = time.time() - start_time
                    
                    if response.status == 200:
                        print(f"  ‚úÖ Art√≠culo grande procesado exitosamente")
                        result.add_recovery_attempt(True, recovery_time)
                    else:
                        print(f"  ‚ö†Ô∏è  Respuesta con error: HTTP {response.status}")
                        result.add_recovery_attempt(False, recovery_time)
                        
        except Exception as e:
            recovery_time = time.time() - start_time
            print(f"  ‚ùå Error procesando art√≠culo grande: {type(e).__name__}")
            result.add_recovery_attempt(False, recovery_time, {"error": str(e)})
        
        # Verificar memoria despu√©s del procesamiento
        current_memory = process.memory_info().rss / 1024 / 1024
        memory_increase = current_memory - initial_memory
        
        print(f"üìä Memoria actual: {current_memory:.1f} MB (incremento: {memory_increase:.1f} MB)")
        
        # Test 3.2: M√∫ltiples art√≠culos grandes concurrentes
        print("\nüîÑ Test 3.2: M√∫ltiples art√≠culos grandes concurrentes")
        
        # Crear 10 art√≠culos de 100KB cada uno
        large_articles = []
        for i in range(10):
            large_article = sample_article.copy()
            large_article["contenido_texto"] = "y" * (100 * 1024)  # 100KB
            large_article["titular"] = f"Art√≠culo grande #{i}"
            large_articles.append(large_article)
        
        concurrent_start = time.time()
        
        async with aiohttp.ClientSession() as session:
            tasks = []
            for article in large_articles:
                task = session.post(
                    f"{api_base_url}/procesar_articulo",
                    json=article,
                    timeout=aiohttp.ClientTimeout(total=30)
                )
                tasks.append(task)
            
            # Procesar con l√≠mite de concurrencia para evitar saturaci√≥n
            semaphore = asyncio.Semaphore(3)
            
            async def limited_request(task):
                async with semaphore:
                    try:
                        async with task as response:
                            return response.status
                    except Exception:
                        return 500
            
            results = await asyncio.gather(*[limited_request(task) for task in tasks])
        
        successful = sum(1 for status in results if status == 200)
        concurrent_time = time.time() - concurrent_start
        
        print(f"  ‚úÖ Procesados: {successful}/{len(large_articles)}")
        print(f"  ‚è±Ô∏è  Tiempo total: {concurrent_time:.2f}s")
        
        if successful > len(large_articles) * 0.7:  # 70% √©xito
            result.add_recovery_attempt(True, concurrent_time, {
                "successful": successful,
                "total": len(large_articles)
            })
        else:
            result.add_recovery_attempt(False, concurrent_time)
        
        # Verificar memoria final y forzar garbage collection
        pre_gc_memory = process.memory_info().rss / 1024 / 1024
        gc.collect()
        post_gc_memory = process.memory_info().rss / 1024 / 1024
        
        print(f"\nüìä Memoria pre-GC: {pre_gc_memory:.1f} MB")
        print(f"üìä Memoria post-GC: {post_gc_memory:.1f} MB")
        print(f"üìä Memoria liberada: {pre_gc_memory - post_gc_memory:.1f} MB")
        
        result.system_state_changes.append(f"Memoria liberada por GC: {pre_gc_memory - post_gc_memory:.1f} MB")
        
        # Test 3.3: Recuperaci√≥n despu√©s de presi√≥n de memoria
        print("\nüîÑ Test 3.3: Verificaci√≥n de recuperaci√≥n post-presi√≥n")
        
        # Enviar art√≠culo normal para verificar que el sistema funciona
        recovery_check_start = time.time()
        
        try:
            response = await self._send_request_with_retry(
                f"{api_base_url}/procesar_articulo",
                sample_article
            )
            
            if response["status"] == 200:
                print(f"  ‚úÖ Sistema operativo despu√©s de presi√≥n de memoria")
                result.system_state_changes.append("Sistema recuperado post-presi√≥n de memoria")
            else:
                print(f"  ‚ùå Sistema degradado post-presi√≥n")
                
        except Exception as e:
            print(f"  ‚ùå Sistema no recuperado: {str(e)}")
        
        result.print_summary()
        
        # Assertions
        assert result.successful_recoveries > 0, "No hubo recuperaciones exitosas"
        assert post_gc_memory < pre_gc_memory * 1.5, "Posible fuga de memoria detectada"
    
    @pytest.mark.asyncio
    async def test_circuit_breaker(self, api_base_url, sample_article):
        """
        Test 4: Funcionamiento del circuit breaker.
        
        Verifica que el sistema implementa un circuit breaker para
        evitar cascadas de fallos.
        """
        print("\n" + "="*80)
        print("TEST 4: CIRCUIT BREAKER")
        print("="*80)
        
        result = RecoveryTestResult("Circuit Breaker")
        
        # Test 4.1: Provocar apertura del circuit breaker
        print("\nüîÑ Test 4.1: Provocar apertura del circuit breaker")
        
        # Enviar m√∫ltiples requests que fallar√°n
        failed_requests = 0
        circuit_open_detected = False
        
        for i in range(20):
            # Crear art√≠culo inv√°lido (sin campos requeridos)
            invalid_article = {"titulo": f"Invalid {i}"}
            
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        f"{api_base_url}/procesar_articulo",
                        json=invalid_article,
                        timeout=aiohttp.ClientTimeout(total=5)
                    ) as response:
                        if response.status >= 500:
                            failed_requests += 1
                        
                        # Detectar si el circuit breaker se abri√≥
                        response_data = await response.json()
                        if "circuit_breaker" in str(response_data).lower():
                            circuit_open_detected = True
                            print(f"  ‚ö° Circuit breaker detectado en request #{i+1}")
                            break
                            
            except Exception as e:
                failed_requests += 1
                if "circuit" in str(e).lower():
                    circuit_open_detected = True
                    print(f"  ‚ö° Circuit breaker detectado: {type(e).__name__}")
                    break
            
            # Peque√±a pausa entre requests
            await asyncio.sleep(0.1)
        
        print(f"  üìä Requests fallidas antes de circuit breaker: {failed_requests}")
        
        if circuit_open_detected:
            result.add_recovery_attempt(True, failed_requests * 0.1, {
                "circuit_breaker_triggered": True,
                "failed_requests": failed_requests
            })
        else:
            print(f"  ‚ö†Ô∏è  Circuit breaker no detectado expl√≠citamente")
        
        # Test 4.2: Esperar recuperaci√≥n del circuit breaker
        print("\nüîÑ Test 4.2: Recuperaci√≥n del circuit breaker")
        
        # Esperar tiempo de recuperaci√≥n (t√≠picamente 30-60 segundos)
        wait_time = 10  # Reducido para tests
        print(f"  ‚è≥ Esperando {wait_time}s para recuperaci√≥n...")
        await asyncio.sleep(wait_time)
        
        # Intentar request v√°lida
        recovery_start = time.time()
        
        try:
            response = await self._send_request_with_retry(
                f"{api_base_url}/procesar_articulo",
                sample_article,
                max_retries=3
            )
            
            recovery_time = time.time() - recovery_start
            
            if response["status"] == 200:
                print(f"  ‚úÖ Circuit breaker recuperado")
                result.add_recovery_attempt(True, recovery_time, {
                    "recovery_successful": True,
                    "wait_time": wait_time
                })
                result.system_state_changes.append("Circuit breaker cerrado - sistema operativo")
            else:
                print(f"  ‚ùå Sistema a√∫n no recuperado")
                result.add_recovery_attempt(False, recovery_time)
                
        except Exception as e:
            recovery_time = time.time() - recovery_start
            print(f"  ‚ùå Error en recuperaci√≥n: {str(e)}")
            result.add_recovery_attempt(False, recovery_time)
        
        result.print_summary()
        
        # Assertions
        assert result.total_attempts > 0, "No se registraron intentos"
        assert result.successful_recoveries > 0, "Circuit breaker no se recuper√≥"
    
    @pytest.mark.asyncio
    async def test_resiliencia_general(self, api_base_url, sample_article, sample_fragment):
        """
        Test 5: Resiliencia general del sistema.
        
        Prueba combinada que simula m√∫ltiples tipos de fallos
        para verificar la resiliencia general.
        """
        print("\n" + "="*80)
        print("TEST 5: RESILIENCIA GENERAL DEL SISTEMA")
        print("="*80)
        
        result = RecoveryTestResult("Resiliencia General")
        
        # Escenarios de fallo a probar
        failure_scenarios = [
            {
                "name": "Timeout de red",
                "data": sample_article,
                "endpoint": "procesar_articulo",
                "timeout": 0.001  # Timeout muy bajo para provocar fallo
            },
            {
                "name": "Payload muy grande",
                "data": {**sample_article, "contenido_texto": "z" * (2 * 1024 * 1024)},  # 2MB
                "endpoint": "procesar_articulo",
                "timeout": 30
            },
            {
                "name": "Caracteres especiales",
                "data": {**sample_fragment, "texto_original": "Test con ÁâπÊÆäÂ≠óÁ¨¶ üöÄ \x00 \n\r"},
                "endpoint": "procesar_fragmento",
                "timeout": 10
            },
            {
                "name": "JSON malformado",
                "data": sample_article,
                "endpoint": "procesar_articulo",
                "timeout": 10,
                "corrupt_json": True
            },
            {
                "name": "Alta concurrencia s√∫bita",
                "data": sample_fragment,
                "endpoint": "procesar_fragmento",
                "timeout": 10,
                "concurrent_requests": 20
            }
        ]
        
        for scenario in failure_scenarios:
            print(f"\nüîÑ Escenario: {scenario['name']}")
            
            start_time = time.time()
            
            try:
                if scenario.get("concurrent_requests"):
                    # Escenario de concurrencia
                    async with aiohttp.ClientSession() as session:
                        tasks = []
                        for i in range(scenario["concurrent_requests"]):
                            data = {**scenario["data"], "id_fragmento": f"concurrent_{i}"}
                            task = session.post(
                                f"{api_base_url}/{scenario['endpoint']}",
                                json=data,
                                timeout=aiohttp.ClientTimeout(total=scenario["timeout"])
                            )
                            tasks.append(task)
                        
                        results = await asyncio.gather(*tasks, return_exceptions=True)
                        
                        successful = sum(1 for r in results if not isinstance(r, Exception))
                        success_rate = successful / len(results)
                        
                        if success_rate > 0.5:
                            print(f"  ‚úÖ Manej√≥ concurrencia: {successful}/{len(results)} exitosos")
                            result.add_recovery_attempt(True, time.time() - start_time, {
                                "scenario": scenario["name"],
                                "success_rate": success_rate
                            })
                        else:
                            print(f"  ‚ùå Fallo bajo concurrencia: {successful}/{len(results)} exitosos")
                            result.add_recovery_attempt(False, time.time() - start_time)
                
                elif scenario.get("corrupt_json"):
                    # Enviar JSON corrupto
                    async with aiohttp.ClientSession() as session:
                        async with session.post(
                            f"{api_base_url}/{scenario['endpoint']}",
                            data='{"invalid": json"corrupt}',  # JSON malformado
                            headers={"Content-Type": "application/json"},
                            timeout=aiohttp.ClientTimeout(total=scenario["timeout"])
                        ) as response:
                            if response.status == 400:  # Error esperado
                                print(f"  ‚úÖ JSON corrupto manejado correctamente (HTTP 400)")
                                result.add_recovery_attempt(True, time.time() - start_time, {
                                    "scenario": scenario["name"],
                                    "handled_correctly": True
                                })
                            else:
                                print(f"  ‚ùå Respuesta inesperada para JSON corrupto")
                                result.add_recovery_attempt(False, time.time() - start_time)
                
                else:
                    # Escenarios normales
                    async with aiohttp.ClientSession() as session:
                        async with session.post(
                            f"{api_base_url}/{scenario['endpoint']}",
                            json=scenario["data"],
                            timeout=aiohttp.ClientTimeout(total=scenario["timeout"])
                        ) as response:
                            response_data = await response.json()
                            
                            if response.status in [200, 400, 413]:  # Respuestas aceptables
                                print(f"  ‚úÖ Escenario manejado: HTTP {response.status}")
                                result.add_recovery_attempt(True, time.time() - start_time, {
                                    "scenario": scenario["name"],
                                    "status": response.status
                                })
                            else:
                                print(f"  ‚ùå Error no manejado: HTTP {response.status}")
                                result.add_recovery_attempt(False, time.time() - start_time)
                                
            except asyncio.TimeoutError:
                if scenario["name"] == "Timeout de red":
                    print(f"  ‚úÖ Timeout manejado correctamente")
                    result.add_recovery_attempt(True, time.time() - start_time, {
                        "scenario": scenario["name"],
                        "timeout_handled": True
                    })
                else:
                    print(f"  ‚ùå Timeout inesperado")
                    result.add_recovery_attempt(False, time.time() - start_time)
                    
            except Exception as e:
                print(f"  ‚ùå Excepci√≥n: {type(e).__name__}")
                result.add_recovery_attempt(False, time.time() - start_time, {
                    "scenario": scenario["name"],
                    "exception": type(e).__name__
                })
            
            # Peque√±a pausa entre escenarios
            await asyncio.sleep(1)
        
        # Verificaci√≥n final del sistema
        print("\nüîÑ Verificaci√≥n final del sistema")
        
        try:
            final_response = await self._send_request_with_retry(
                f"{api_base_url}/procesar_articulo",
                sample_article
            )
            
            if final_response["status"] == 200:
                print("  ‚úÖ Sistema completamente operativo despu√©s de todos los escenarios")
                result.system_state_changes.append("Sistema resiliente - todos los escenarios superados")
            else:
                print("  ‚ö†Ô∏è  Sistema parcialmente degradado")
                result.system_state_changes.append("Sistema parcialmente degradado post-tests")
                
        except Exception as e:
            print(f"  ‚ùå Sistema no operativo: {str(e)}")
            result.system_state_changes.append("Sistema no operativo post-tests")
        
        result.print_summary()
        
        # Calcular resiliencia general
        resilience_score = result.calculate_recovery_rate()
        print(f"\nüéØ SCORE DE RESILIENCIA: {resilience_score:.1f}%")
        
        if resilience_score >= 80:
            print("   ‚úÖ Sistema altamente resiliente")
        elif resilience_score >= 60:
            print("   ‚ö†Ô∏è  Sistema moderadamente resiliente")
        else:
            print("   ‚ùå Sistema con baja resiliencia")
        
        # Assertions
        assert resilience_score >= 60, f"Score de resiliencia muy bajo: {resilience_score:.1f}%"
        assert result.successful_recoveries >= len(failure_scenarios) * 0.5, "Menos del 50% de escenarios manejados"


def generate_recovery_report(results: List[RecoveryTestResult]):
    """Genera un reporte de recuperaci√≥n detallado."""
    print("\n" + "="*80)
    print("REPORTE DE RECUPERACI√ìN DEL SISTEMA")
    print("="*80)
    
    total_attempts = sum(r.total_attempts for r in results)
    total_recoveries = sum(r.successful_recoveries for r in results)
    overall_rate = (total_recoveries / total_attempts * 100) if total_attempts > 0 else 0
    
    print(f"\nRESUMEN GENERAL:")
    print(f"  Total de tests: {len(results)}")
    print(f"  Total de intentos: {total_attempts}")
    print(f"  Recuperaciones exitosas: {total_recoveries}")
    print(f"  Tasa general de recuperaci√≥n: {overall_rate:.1f}%")
    
    print(f"\nDETALLE POR TEST:")
    for result in results:
        print(f"\n  {result.test_name}:")
        print(f"    - Tasa de recuperaci√≥n: {result.calculate_recovery_rate():.1f}%")
        print(f"    - Tiempo promedio: {result.get_average_recovery_time():.2f}s")
        print(f"    - Intentos: {result.total_attempts}")
    
    print("\n" + "="*80)


if __name__ == "__main__":
    # Permitir ejecuci√≥n directa del archivo
    import subprocess
    import sys
    
    print("Ejecutando tests de recuperaci√≥n...")
    print("NOTA: Estos tests pueden generar errores esperados en los logs")
    
    cmd = [sys.executable, "-m", "pytest", __file__, "-v", "-s"]
    result = subprocess.run(cmd)
    
    if result.returncode == 0:
        print("\n‚úÖ Tests de recuperaci√≥n completados exitosamente")
    else:
        print("\n‚ùå Tests de recuperaci√≥n fallaron")
    
    sys.exit(result.returncode)
