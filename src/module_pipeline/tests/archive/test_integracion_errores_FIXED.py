"""
Test de integraci√≥n y manejo de errores - VERSI√ìN CORREGIDA.

PROBLEMAS DETECTADOS Y CORREGIDOS:
1. Casos de prueba m√°s realistas
2. Manejo de errores espec√≠ficos del pipeline
3. Configuraci√≥n de mocks m√°s robusta
4. Validaci√≥n de casos edge
"""

import os
import sys
from pathlib import Path
from uuid import uuid4

print("üîß Configurando entorno para tests de integraci√≥n...")

# =========================================================================
# CONFIGURACI√ìN INICIAL
# =========================================================================

# Variables de entorno
os.environ["GROQ_API_KEY"] = "mock-api-key-for-testing"
os.environ["GROQ_MODEL_ID"] = "mixtral-8x7b-32768"
os.environ["SUPABASE_URL"] = "https://mock.supabase.co"
os.environ["SUPABASE_KEY"] = "mock-supabase-key"
os.environ["LOG_LEVEL"] = "WARNING"  # Menos verbose para estos tests

# Path
src_path = Path(__file__).parent.parent / "src"
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))

# Logging
from loguru import logger
logger.remove()
logger.add(sys.stderr, level="WARNING", format="<level>{level: <8}</level> | <cyan>{message}</cyan>")

print("   ‚úÖ Configuraci√≥n lista")

# =========================================================================
# IMPORTS
# =========================================================================

try:
    from utils.fragment_processor import FragmentProcessor
    from pipeline.fase_1_triaje import ejecutar_fase_1
    from pipeline.fase_2_extraccion import ejecutar_fase_2
    from pipeline.fase_3_citas_datos import ejecutar_fase_3
    from pipeline.fase_4_normalizacion import ejecutar_fase_4
    
    from models.procesamiento import (
        ResultadoFase1Triaje,
        ResultadoFase2Extraccion,
        ResultadoFase3CitasDatos
    )
    
    print("   ‚úÖ Imports exitosos")
    
except ImportError as e:
    print(f"‚ùå Error en imports: {e}")
    sys.exit(1)

# =========================================================================
# TESTS DE CASOS EDGE
# =========================================================================

def test_texto_vacio():
    """Test con texto completamente vac√≠o."""
    print("\nüîç TEST: Texto vac√≠o")
    print("-" * 30)
    
    id_fragmento = uuid4()
    texto_vacio = ""
    
    import unittest.mock as mock
    
    # Mock con respuesta de descarte
    respuesta_mock = """
EXCLUSI√ìN: S√ç - Texto vac√≠o

TIPO DE ART√çCULO: INDETERMINADO

TOTAL: [0] / 25

DECISI√ìN: DESCARTAR

JUSTIFICACI√ìN:
Texto vac√≠o o sin contenido procesable.
"""
    
    try:
        with mock.patch('pipeline.fase_1_triaje._cargar_modelo_spacy', return_value=None), \
             mock.patch('pipeline.fase_1_triaje._llamar_groq_api_triaje', return_value=("prompt", respuesta_mock)):
            
            resultado = ejecutar_fase_1(
                id_fragmento_original=id_fragmento,
                texto_original_fragmento=texto_vacio
            )
        
        print(f"‚úÖ Texto vac√≠o manejado correctamente")
        print(f"   - Es relevante: {resultado.es_relevante}")
        print(f"   - Decisi√≥n: {resultado.decision_triaje}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error con texto vac√≠o: {e}")
        return False


def test_texto_muy_corto():
    """Test con texto extremadamente corto."""
    print("\nüîç TEST: Texto muy corto")
    print("-" * 30)
    
    id_fragmento = uuid4()
    texto_corto = "S√≠."
    
    import unittest.mock as mock
    
    respuesta_mock = """
EXCLUSI√ìN: S√ç - Texto demasiado corto

TIPO DE ART√çCULO: INDETERMINADO

TOTAL: [2] / 25

DECISI√ìN: DESCARTAR

JUSTIFICACI√ìN:
Texto muy corto, sin suficiente informaci√≥n.
"""
    
    try:
        with mock.patch('pipeline.fase_1_triaje._cargar_modelo_spacy', return_value=None), \
             mock.patch('pipeline.fase_1_triaje._llamar_groq_api_triaje', return_value=("prompt", respuesta_mock)):
            
            resultado = ejecutar_fase_1(
                id_fragmento_original=id_fragmento,
                texto_original_fragmento=texto_corto
            )
        
        print(f"‚úÖ Texto corto manejado correctamente")
        print(f"   - Es relevante: {resultado.es_relevante}")
        print(f"   - Decisi√≥n: {resultado.decision_triaje}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error con texto corto: {e}")
        return False


def test_texto_irrelevante():
    """Test con contenido claramente irrelevante."""
    print("\nüîç TEST: Contenido irrelevante")
    print("-" * 30)
    
    id_fragmento = uuid4()
    texto_irrelevante = """
    Hoy fui al supermercado y compr√© leche, pan y huevos. 
    El tiempo estaba nublado. Mi gato se llama Whiskers y le gusta dormir.
    Ma√±ana tengo que lavar la ropa.
    """
    
    import unittest.mock as mock
    
    respuesta_mock = """
EXCLUSI√ìN: S√ç - Contenido personal sin inter√©s p√∫blico

TIPO DE ART√çCULO: PERSONAL

Relevancia geogr√°fica: [1] - Sin relevancia
Relevancia tem√°tica: [1] - Vida cotidiana
Densidad factual: [1]
Complejidad relacional: [1]
Valor informativo: [1]

TOTAL: [5] / 25

DECISI√ìN: DESCARTAR

JUSTIFICACI√ìN:
Contenido personal sin relevancia informativa o inter√©s p√∫blico.

ELEMENTOS CLAVE:
- Actividades cotidianas
- Informaci√≥n personal
"""
    
    try:
        with mock.patch('pipeline.fase_1_triaje._cargar_modelo_spacy', return_value=None), \
             mock.patch('pipeline.fase_1_triaje._llamar_groq_api_triaje', return_value=("prompt", respuesta_mock)):
            
            resultado = ejecutar_fase_1(
                id_fragmento_original=id_fragmento,
                texto_original_fragmento=texto_irrelevante
            )
        
        print(f"‚úÖ Contenido irrelevante detectado correctamente")
        print(f"   - Es relevante: {resultado.es_relevante}")
        print(f"   - Decisi√≥n: {resultado.decision_triaje}")
        print(f"   - Puntuaci√≥n: {resultado.puntuacion_triaje}/25")
        
        assert not resultado.es_relevante
        assert resultado.decision_triaje == "DESCARTAR"
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error con contenido irrelevante: {e}")
        return False


def test_contenido_ambiguo():
    """Test con contenido que podr√≠a ser ambiguo para clasificar."""
    print("\nüîç TEST: Contenido ambiguo")
    print("-" * 30)
    
    id_fragmento = uuid4()
    texto_ambiguo = """
    La empresa anunci√≥ cambios en su estructura. 
    Los empleados est√°n preocupados por las nuevas medidas.
    Se espera m√°s informaci√≥n la pr√≥xima semana.
    """
    
    import unittest.mock as mock
    
    respuesta_mock = """
EXCLUSI√ìN: NO

TIPO DE ART√çCULO: ECONOM√çA

Relevancia geogr√°fica: [2] - Empresa local
Relevancia tem√°tica: [3] - Econom√≠a empresarial
Densidad factual: [2]
Complejidad relacional: [2]
Valor informativo: [3]

TOTAL: [12] / 25

DECISI√ìN: CONSIDERAR

JUSTIFICACI√ìN:
Informaci√≥n empresarial con datos limitados pero potencial inter√©s.

ELEMENTOS CLAVE:
- Cambios empresariales
- Impacto en empleados
- Informaci√≥n pendiente
"""
    
    try:
        with mock.patch('pipeline.fase_1_triaje._cargar_modelo_spacy', return_value=None), \
             mock.patch('pipeline.fase_1_triaje._llamar_groq_api_triaje', return_value=("prompt", respuesta_mock)):
            
            resultado = ejecutar_fase_1(
                id_fragmento_original=id_fragmento,
                texto_original_fragmento=texto_ambiguo
            )
        
        print(f"‚úÖ Contenido ambiguo procesado correctamente")
        print(f"   - Es relevante: {resultado.es_relevante}")
        print(f"   - Decisi√≥n: {resultado.decision_triaje}")
        print(f"   - Puntuaci√≥n: {resultado.puntuacion_triaje}/25")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error con contenido ambiguo: {e}")
        return False

# =========================================================================
# TESTS DE MANEJO DE ERRORES
# =========================================================================

def test_error_simulado_groq():
    """Test que simula un error en la API de Groq."""
    print("\nüîç TEST: Error simulado de Groq API")
    print("-" * 30)
    
    id_fragmento = uuid4()
    texto = "El presidente anunci√≥ nuevas medidas econ√≥micas."
    
    import unittest.mock as mock
    
    try:
        # Simular error en la API
        with mock.patch('pipeline.fase_1_triaje._cargar_modelo_spacy', return_value=None), \
             mock.patch('pipeline.fase_1_triaje._llamar_groq_api_triaje', side_effect=Exception("Error simulado de API")):
            
            resultado = ejecutar_fase_1(
                id_fragmento_original=id_fragmento,
                texto_original_fragmento=texto
            )
        
        print(f"‚úÖ Error de API manejado con fallback")
        print(f"   - Es relevante: {resultado.es_relevante}")
        print(f"   - Decisi√≥n: {resultado.decision_triaje}")
        
        # El fallback deber√≠a marcar como relevante por pol√≠tica de seguridad
        assert resultado.es_relevante == True
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error no manejado correctamente: {e}")
        return False


def test_respuesta_malformada():
    """Test con respuesta malformada del LLM."""
    print("\nüîç TEST: Respuesta malformada del LLM")
    print("-" * 30)
    
    id_fragmento = uuid4()
    texto = "Noticia sobre econom√≠a nacional."
    
    import unittest.mock as mock
    
    # Respuesta completamente malformada
    respuesta_malformada = "Esta es una respuesta que no sigue el formato esperado para nada."
    
    try:
        with mock.patch('pipeline.fase_1_triaje._cargar_modelo_spacy', return_value=None), \
             mock.patch('pipeline.fase_1_triaje._llamar_groq_api_triaje', return_value=("prompt", respuesta_malformada)):
            
            resultado = ejecutar_fase_1(
                id_fragmento_original=id_fragmento,
                texto_original_fragmento=texto
            )
        
        print(f"‚úÖ Respuesta malformada manejada")
        print(f"   - Es relevante: {resultado.es_relevante}")
        print(f"   - Decisi√≥n: {resultado.decision_triaje}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error con respuesta malformada: {e}")
        return False

# =========================================================================
# TESTS DE INTEGRACI√ìN
# =========================================================================

def test_pipeline_fragmento_no_relevante():
    """Test del pipeline completo con un fragmento que ser√° descartado."""
    print("\nüîç TEST: Pipeline con fragmento no relevante")
    print("-" * 30)
    
    id_fragmento = uuid4()
    texto_no_relevante = "Me gusta el helado de chocolate. Es mi sabor favorito."
    
    import unittest.mock as mock
    
    # Mock para fase 1 que descarta
    respuesta_triaje = """
EXCLUSI√ìN: S√ç - Contenido personal

TIPO DE ART√çCULO: PERSONAL

TOTAL: [3] / 25

DECISI√ìN: DESCARTAR

JUSTIFICACI√ìN:
Contenido personal sin relevancia informativa.
"""
    
    try:
        with mock.patch('pipeline.fase_1_triaje._cargar_modelo_spacy', return_value=None), \
             mock.patch('pipeline.fase_1_triaje._llamar_groq_api_triaje', return_value=("prompt", respuesta_triaje)):
            
            resultado_fase_1 = ejecutar_fase_1(
                id_fragmento_original=id_fragmento,
                texto_original_fragmento=texto_no_relevante
            )
        
        print(f"‚úÖ Fase 1 completada - Fragmento descartado")
        print(f"   - Es relevante: {resultado_fase_1.es_relevante}")
        print(f"   - Decisi√≥n: {resultado_fase_1.decision_triaje}")
        
        # Para fragmentos no relevantes, no deber√≠a continuar a fase 2
        if not resultado_fase_1.es_relevante:
            print(f"‚úÖ Pipeline detenido correctamente en Fase 1")
            return True
        
        return False
        
    except Exception as e:
        print(f"‚ùå Error en test de integraci√≥n: {e}")
        return False


def test_coherencia_ids():
    """Test que verifica la coherencia de IDs entre fases."""
    print("\nüîç TEST: Coherencia de IDs entre fases")
    print("-" * 30)
    
    id_fragmento = uuid4()
    texto = "El ministro anunci√≥ una inversi√≥n de 1000 millones para tecnolog√≠a."
    
    import unittest.mock as mock
    
    # Mocks con datos coherentes
    respuesta_triaje = """
EXCLUSI√ìN: NO
TIPO DE ART√çCULO: POL√çTICA
TOTAL: [20] / 25
DECISI√ìN: PROCESAR
JUSTIFICACI√ìN: Relevante
"""
    
    respuesta_extraccion = """{
  "hechos": [
    {"id": 1, "contenido": "Anuncio de inversi√≥n", "tipo_hecho": "ANUNCIO"}
  ],
  "entidades": [
    {"id": 1, "nombre": "ministro", "tipo": "PERSONA"}
  ]
}"""
    
    respuesta_citas = """{
  "citas_textuales": [
    {"id": 1, "cita": "Test quote", "entidad_id": 1, "hecho_id": 1}
  ],
  "datos_cuantitativos": [
    {"id": 1, "hecho_id": 1, "indicador": "Inversi√≥n", "valor": 1000}
  ]
}"""
    
    try:
        processor = FragmentProcessor(id_fragmento)
        
        # Mock todas las llamadas
        with mock.patch('pipeline.fase_1_triaje._cargar_modelo_spacy', return_value=None), \
             mock.patch('pipeline.fase_1_triaje._llamar_groq_api_triaje', return_value=("prompt", respuesta_triaje)), \
             mock.patch('pipeline.fase_2_extraccion._llamar_groq_api_extraccion', return_value=("prompt", respuesta_extraccion)), \
             mock.patch('pipeline.fase_3_citas_datos._llamar_groq_api_citas_datos', return_value=("prompt", respuesta_citas)):
            
            # Fase 1
            resultado_fase_1 = ejecutar_fase_1(
                id_fragmento_original=id_fragmento,
                texto_original_fragmento=texto
            )
            
            # Fase 2
            resultado_fase_2 = ejecutar_fase_2(
                resultado_fase_1=resultado_fase_1,
                processor=processor
            )
            
            # Fase 3
            resultado_fase_3 = ejecutar_fase_3(
                resultado_fase_2=resultado_fase_2,
                processor=processor
            )
        
        # Verificar coherencia de IDs
        assert resultado_fase_1.id_fragmento == id_fragmento
        assert resultado_fase_2.id_fragmento == id_fragmento
        assert resultado_fase_3.id_fragmento == id_fragmento
        
        print(f"‚úÖ IDs coherentes en todas las fases")
        print(f"   - Fragmento: {id_fragmento}")
        print(f"   - Hechos: {len(resultado_fase_2.hechos_extraidos)}")
        print(f"   - Entidades: {len(resultado_fase_2.entidades_extraidas)}")
        print(f"   - Citas: {len(resultado_fase_3.citas_textuales_extraidas)}")
        print(f"   - Datos: {len(resultado_fase_3.datos_cuantitativos_extraidos)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test de coherencia: {e}")
        return False

# =========================================================================
# EJECUTOR PRINCIPAL
# =========================================================================

def ejecutar_tests_integracion():
    """Ejecuta todos los tests de integraci√≥n y manejo de errores."""
    print("\n" + "="*60)
    print("üß™ TESTS DE INTEGRACI√ìN Y MANEJO DE ERRORES")
    print("="*60)
    
    tests = [
        ("Texto vac√≠o", test_texto_vacio),
        ("Texto muy corto", test_texto_muy_corto),
        ("Contenido irrelevante", test_texto_irrelevante),
        ("Contenido ambiguo", test_contenido_ambiguo),
        ("Error simulado Groq", test_error_simulado_groq),
        ("Respuesta malformada", test_respuesta_malformada),
        ("Pipeline con descarte", test_pipeline_fragmento_no_relevante),
        ("Coherencia de IDs", test_coherencia_ids)
    ]
    
    exitosos = 0
    errores = []
    
    for nombre, test_func in tests:
        try:
            print(f"\nüìã Ejecutando: {nombre}")
            if test_func():
                exitosos += 1
                print(f"‚úÖ {nombre}: EXITOSO")
            else:
                print(f"‚ùå {nombre}: FALLIDO")
                errores.append(nombre)
                
        except Exception as e:
            print(f"‚ùå {nombre}: ERROR - {e}")
            errores.append(nombre)
    
    # Resumen
    print("\n" + "="*60)
    print("üìä RESUMEN DE TESTS DE INTEGRACI√ìN")
    print("="*60)
    
    total = len(tests)
    print(f"\nüìà Resultados:")
    print(f"   - Tests exitosos: {exitosos}/{total}")
    print(f"   - Tests fallidos: {len(errores)}/{total}")
    print(f"   - Tasa de √©xito: {(exitosos/total)*100:.1f}%")
    
    if errores:
        print(f"\n‚ùå Tests fallidos:")
        for error in errores:
            print(f"   - {error}")
    else:
        print(f"\nüéâ TODOS LOS TESTS DE INTEGRACI√ìN PASARON")
        print(f"   - Manejo de casos edge funcional")
        print(f"   - Recuperaci√≥n de errores exitosa")
        print(f"   - Coherencia de datos verificada")
    
    return len(errores) == 0


# =========================================================================
# EJECUCI√ìN PRINCIPAL
# =========================================================================

if __name__ == "__main__":
    print("üöÄ Iniciando tests de integraci√≥n y manejo de errores...")
    
    try:
        success = ejecutar_tests_integracion()
        
        if success:
            print("\nüèÜ ¬°TESTS DE INTEGRACI√ìN EXITOSOS!")
        else:
            print("\nüí• Algunos tests fallaron. Revisa los errores.")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Tests interrumpidos por el usuario.")
        
    except Exception as e:
        print(f"\nüí• Error cr√≠tico: {e}")
        import traceback
        traceback.print_exc()
