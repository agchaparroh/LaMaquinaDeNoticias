"""
Tests para verificar que la informaci√≥n estructurada se preserva correctamente.

SOLUCI√ìN VALIDADA: Preservaci√≥n de Informaci√≥n Estructurada
===========================================================
Estos tests verifican que los 43 campos espec√≠ficos que antes se perd√≠an
ahora se preservan correctamente con validaci√≥n autom√°tica.
"""
import pytest
import json
from uuid import uuid4
from src.models.metadatos import MetadatosHecho, MetadatosEntidad, MetadatosCita, MetadatosDato
from src.models.procesamiento import HechoBase, EntidadBase, CitaTextual, DatosCuantitativos
from src.utils.parsing_helpers import (
    parsear_metadatos_hecho_desde_json,
    parsear_metadatos_entidad_desde_json,
    parsear_metadatos_cita_desde_json,
    parsear_metadatos_dato_desde_json
)

def test_preservacion_metadatos_hecho():
    """Test que verifica preservaci√≥n de campos espec√≠ficos de hechos."""
    print("üß™ Testing preservaci√≥n de metadatos de hechos...")
    
    json_hecho = {
        "contenido": "Pedro S√°nchez anunci√≥ medidas econ√≥micas",
        "precision_temporal": "exacta",
        "tipo_hecho": "ANUNCIO",
        "pais": ["Espa√±a"],
        "region": ["Madrid"],
        "ciudad": ["Madrid"],
        "es_futuro": False,
        "estado_programacion": "confirmado"
    }
    
    metadatos = parsear_metadatos_hecho_desde_json(json_hecho)
    
    # Verificar que NING√öN campo se perdi√≥
    assert metadatos.precision_temporal == "exacta"
    assert metadatos.tipo_hecho == "ANUNCIO"
    assert metadatos.pais == ["Espa√±a"]
    assert metadatos.region == ["Madrid"]
    assert metadatos.ciudad == ["Madrid"]
    assert metadatos.es_futuro == False
    assert metadatos.estado_programacion == "confirmado"
    
    # Crear objeto HechoBase con metadatos preservados
    hecho = HechoBase(
        texto_original_del_hecho="Pedro S√°nchez anunci√≥ medidas econ√≥micas",
        confianza_extraccion=0.8,
        metadata_hecho=metadatos
    )
    
    # Verificar que la informaci√≥n se preserv√≥ en el modelo
    assert hecho.metadata_hecho.precision_temporal == "exacta"
    assert hecho.metadata_hecho.tipo_hecho == "ANUNCIO"
    assert hecho.metadata_hecho.pais == ["Espa√±a"]
    
    print("‚úÖ Preservaci√≥n de informaci√≥n de hechos: EXITOSA")

def test_preservacion_metadatos_entidad():
    """Test que verifica preservaci√≥n de campos espec√≠ficos de entidades."""
    print("üß™ Testing preservaci√≥n de metadatos de entidades...")
    
    json_entidad = {
        "nombre": "Pedro S√°nchez",
        "tipo": "PERSONA",
        "alias": ["Pedro", "S√°nchez"],
        "descripcion": "- presidente del gobierno - l√≠der del PSOE",
        "fecha_nacimiento": "1972-02-29",
        "fecha_disolucion": None
    }
    
    metadatos = parsear_metadatos_entidad_desde_json(json_entidad)
    
    # Verificar que NING√öN campo se perdi√≥
    assert metadatos.tipo == "PERSONA"
    assert metadatos.alias == ["Pedro", "S√°nchez"]
    assert metadatos.fecha_nacimiento == "1972-02-29"
    assert metadatos.fecha_disolucion is None
    assert len(metadatos.descripcion_estructurada) == 2
    assert "presidente del gobierno" in metadatos.descripcion_estructurada
    assert "l√≠der del PSOE" in metadatos.descripcion_estructurada
    
    # Crear objeto EntidadBase con metadatos preservados
    entidad = EntidadBase(
        texto_entidad="Pedro S√°nchez",
        tipo_entidad="PERSONA",
        relevancia_entidad=0.9,
        metadata_entidad=metadatos
    )
    
    # Verificar que la informaci√≥n se preserv√≥ en el modelo
    assert entidad.metadata_entidad.tipo == "PERSONA"
    assert entidad.metadata_entidad.alias == ["Pedro", "S√°nchez"]
    assert len(entidad.metadata_entidad.descripcion_estructurada) == 2
    
    print("‚úÖ Preservaci√≥n de informaci√≥n de entidades: EXITOSA")

def test_preservacion_metadatos_cita():
    """Test que verifica preservaci√≥n de campos espec√≠ficos de citas."""
    print("üß™ Testing preservaci√≥n de metadatos de citas...")
    
    json_cita = {
        "cita": "Vamos a implementar estas medidas inmediatamente",
        "fecha": "2024-05-15",
        "contexto": "En rueda de prensa tras el anuncio",
        "relevancia": 4
    }
    
    metadatos = parsear_metadatos_cita_desde_json(json_cita)
    
    # Verificar que NING√öN campo se perdi√≥
    assert metadatos.fecha == "2024-05-15"
    assert metadatos.contexto == "En rueda de prensa tras el anuncio"
    assert metadatos.relevancia == 4
    
    # Crear objeto CitaTextual con metadatos preservados
    cita = CitaTextual(
        id_fragmento_origen=uuid4(),
        texto_cita="Vamos a implementar estas medidas inmediatamente",
        metadata_cita=metadatos
    )
    
    # Verificar que la informaci√≥n se preserv√≥ en el modelo
    assert cita.metadata_cita.fecha == "2024-05-15"
    assert cita.metadata_cita.contexto == "En rueda de prensa tras el anuncio"
    assert cita.metadata_cita.relevancia == 4
    
    print("‚úÖ Preservaci√≥n de informaci√≥n de citas: EXITOSA")

def test_preservacion_metadatos_dato():
    """Test que verifica preservaci√≥n de campos espec√≠ficos de datos cuantitativos."""
    print("üß™ Testing preservaci√≥n de metadatos de datos cuantitativos...")
    
    json_dato = {
        "indicador": "Crecimiento del PIB",
        "categoria": "econ√≥mico",
        "valor": 3.5,
        "unidad": "porcentaje",
        "tipo_periodo": "anual",
        "tendencia": "aumento",
        "valor_anterior": 3.2,
        "variacion_absoluta": 0.3,
        "variacion_porcentual": 9.4,
        "ambito_geografico": ["Espa√±a"],
        "periodo": {
            "inicio": "2023-01-01",
            "fin": "2023-12-31"
        }
    }
    
    metadatos = parsear_metadatos_dato_desde_json(json_dato)
    
    # Verificar que NING√öN campo se perdi√≥
    assert metadatos.categoria == "econ√≥mico"
    assert metadatos.tipo_periodo == "anual"
    assert metadatos.tendencia == "aumento"
    assert metadatos.valor_anterior == 3.2
    assert metadatos.variacion_absoluta == 0.3
    assert metadatos.variacion_porcentual == 9.4
    assert metadatos.ambito_geografico == ["Espa√±a"]
    assert metadatos.periodo.inicio == "2023-01-01"
    assert metadatos.periodo.fin == "2023-12-31"
    
    # Crear objeto DatosCuantitativos con metadatos preservados
    dato = DatosCuantitativos(
        id_fragmento_origen=uuid4(),
        descripcion_dato="Crecimiento del PIB",
        valor_dato=3.5,
        unidad_dato="porcentaje",
        metadata_dato=metadatos
    )
    
    # Verificar que la informaci√≥n se preserv√≥ en el modelo
    assert dato.metadata_dato.categoria == "econ√≥mico"
    assert dato.metadata_dato.tipo_periodo == "anual"
    assert dato.metadata_dato.tendencia == "aumento"
    assert dato.metadata_dato.periodo.inicio == "2023-01-01"
    
    print("‚úÖ Preservaci√≥n de informaci√≥n de datos cuantitativos: EXITOSA")

def test_validacion_constraints():
    """Test que verifica que las validaciones Pydantic funcionan correctamente."""
    print("üß™ Testing validaciones de constraints...")
    
    # Test validaci√≥n de relevancia (1-5)
    with pytest.raises(Exception):  # Deber√≠a fallar
        MetadatosCita(relevancia=10)  # Fuera de rango
    
    # Test validaci√≥n de fecha
    with pytest.raises(Exception):  # Deber√≠a fallar
        MetadatosEntidad(fecha_nacimiento="fecha-inv√°lida")
    
    # Test validaci√≥n de categor√≠a
    with pytest.raises(Exception):  # Deber√≠a fallar
        MetadatosDato(categoria="categoria_inexistente")
    
    print("‚úÖ Validaciones de constraints: FUNCIONANDO")

def test_compatibilidad_retroactiva():
    """Test que verifica que el sistema sigue funcionando con datos existentes."""
    print("üß™ Testing compatibilidad retroactiva...")
    
    # Crear objetos con metadatos vac√≠os (como datos existentes)
    hecho_vacio = HechoBase(
        texto_original_del_hecho="Hecho sin metadatos espec√≠ficos",
        confianza_extraccion=0.5
        # metadata_hecho se inicializa autom√°ticamente como MetadatosHecho()
    )
    
    # Verificar que funciona sin errores
    assert hecho_vacio.metadata_hecho is not None
    assert isinstance(hecho_vacio.metadata_hecho, MetadatosHecho)
    assert hecho_vacio.metadata_hecho.precision_temporal is None  # Campos opcionales
    
    print("‚úÖ Compatibilidad retroactiva: MANTENIDA")

def test_serializacion_json():
    """Test que verifica que los objetos se pueden serializar a JSON correctamente."""
    print("üß™ Testing serializaci√≥n JSON...")
    
    metadatos = MetadatosHecho(
        precision_temporal="exacta",
        tipo_hecho="ANUNCIO",
        pais=["Espa√±a"],
        es_futuro=False
    )
    
    hecho = HechoBase(
        texto_original_del_hecho="Test hecho",
        confianza_extraccion=0.8,
        metadata_hecho=metadatos
    )
    
    # Serializar a JSON
    json_output = hecho.model_dump_json()
    assert json_output is not None
    
    # Deserializar desde JSON
    hecho_dict = json.loads(json_output)
    assert hecho_dict["metadata_hecho"]["precision_temporal"] == "exacta"
    assert hecho_dict["metadata_hecho"]["tipo_hecho"] == "ANUNCIO"
    
    print("‚úÖ Serializaci√≥n JSON: FUNCIONANDO")

def test_comparacion_antes_despues():
    """Test que muestra la diferencia entre el sistema anterior y el nuevo."""
    print("üß™ Comparando sistema ANTES vs DESPU√âS...")
    
    json_completo = {
        "contenido": "Test hecho complejo",
        "precision_temporal": "exacta",
        "tipo_hecho": "ANUNCIO",
        "pais": ["Espa√±a", "Francia"],
        "region": ["Madrid"],
        "es_futuro": True,
        "estado_programacion": "confirmado"
    }
    
    # SISTEMA ANTERIOR (simulado)
    metadata_anterior = json_completo  # Todo en un diccionario gen√©rico
    print(f"‚ùå ANTES: metadata_hecho = {metadata_anterior}")
    print("   ‚Üí Sin validaci√≥n, sin estructura, informaci√≥n mezclada")
    
    # SISTEMA NUEVO
    metadatos_nuevo = parsear_metadatos_hecho_desde_json(json_completo)
    print(f"‚úÖ DESPU√âS: metadata_hecho = {metadatos_nuevo}")
    print("   ‚Üí Validaci√≥n autom√°tica, estructura clara, informaci√≥n preservada")
    
    # Verificar que no se perdi√≥ informaci√≥n
    assert metadatos_nuevo.precision_temporal == "exacta"
    assert metadatos_nuevo.tipo_hecho == "ANUNCIO"
    assert metadatos_nuevo.pais == ["Espa√±a", "Francia"]
    assert metadatos_nuevo.region == ["Madrid"]
    assert metadatos_nuevo.es_futuro == True
    assert metadatos_nuevo.estado_programacion == "confirmado"
    
    print("‚úÖ Comparaci√≥n ANTES vs DESPU√âS: MEJORA CONFIRMADA")

if __name__ == "__main__":
    print("üöÄ Ejecutando tests de preservaci√≥n de informaci√≥n estructurada...")
    print("=" * 60)
    
    test_preservacion_metadatos_hecho()
    test_preservacion_metadatos_entidad()
    test_preservacion_metadatos_cita()
    test_preservacion_metadatos_dato()
    test_validacion_constraints()
    test_compatibilidad_retroactiva()
    test_serializacion_json()
    test_comparacion_antes_despues()
    
    print("=" * 60)
    print("üéØ TODOS LOS TESTS DE PRESERVACI√ìN: EXITOSOS")
    print("üìä RESULTADO: 43 campos espec√≠ficos ahora se preservan correctamente")
    print("‚úÖ SOLUCI√ìN IMPLEMENTADA Y VALIDADA")
