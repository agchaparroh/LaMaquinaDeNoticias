# Task ID: 20
# Title: Implement POST /procesar_articulo endpoint
# Status: done
# Dependencies: 4, 7, 19
# Priority: high
# Description: Create the API endpoint for processing complete articles in src/main.py.
# Details:
1. In src/main.py, implement the POST /procesar_articulo endpoint
2. Use ArticuloInItem Pydantic model for request validation
3. Call the process_article() function from the controller
4. Implement proper error handling and response formatting
5. Use FastAPI's background tasks for asynchronous processing if required

# Test Strategy:
Create API tests using TestClient. Test with valid and invalid article inputs. Verify correct response formats and error handling.

# Subtasks:
## 20.1. Importar dependencias y configurar endpoint básico [done]
### Dependencies: None
### Description: 
### Details:
- **📁 Documentos del repositorio**:
  - `/src/main.py` - Buscar la función `procesar_articulo()` ya esqueletizada
  - `/src/controller.py` - Revisar la firma de `process_article()`
  - `/src/module_connector/src/models.py` - Copiar import path de ArticuloInItem
- **📚 Documentación Context7**:
  - Sección 6.1: "Definición de Endpoints FastAPI"
  - Sección 6.2: "Modelos de Request/Response"
- **🔧 Especificaciones de implementación**:
  - Importar ArticuloInItem desde module_connector
  - Importar el controller ya instanciado (pipeline_controller)
  - Remover el raise NotImplementedError
  - Definir el endpoint con el modelo correcto como parámetro
  - Agregar documentación en el docstring

## 20.2. Implementar flujo de procesamiento síncrono [done]
### Dependencies: None
### Description: 
### Details:
- **📁 Documentos del repositorio**:
  - `/src/controller.py` - Método `process_article()` línea ~200
  - `/src/utils/error_handling.py` - Función `generate_request_id()`
  - `/src/utils/logging_config.py` - Función `get_logger()`
- **📚 Documentación Context7**:
  - Sección 7.1: "Flujo de Procesamiento de Artículos"
  - Sección 7.2: "Contratos de Datos entre Módulos"
- **🔧 Especificaciones de implementación**:
  - Generar request_id único para el procesamiento
  - Crear logger con contexto del request_id
  - Convertir ArticuloInItem a diccionario para el controller
  - Llamar await process_article() del controller
  - Retornar el resultado directamente

## 20.3. Agregar validación y preparación de datos [done]
### Dependencies: None
### Description: 
### Details:
- **📁 Documentos del repositorio**:
  - `/src/module_connector/src/models.py` - Método `validate_required_fields()`
  - `/src/models/entrada.py` - Validadores de FragmentoProcesableItem
  - `/docs/07-manejo-de-errores.md` - Sección de validación de entrada
- **📚 Documentación Context7**:
  - Sección 6.3: "Validación de Datos de Entrada"
  - Sección 11.1: "Validación en FastAPI"
- **🔧 Especificaciones de implementación**:
  - Verificar campos requeridos del artículo
  - Preparar campos faltantes con valores por defecto
  - Validar longitud mínima del contenido_texto
  - Registrar en logs los datos recibidos (sin contenido completo)
  - Lanzar HTTPException 400 si faltan datos críticos

## 20.4. Implementar respuesta estructurada y manejo de errores [done]
### Dependencies: None
### Description: 
### Details:
- **📁 Documentos del repositorio**:
  - `/src/main.py` - Manejadores de excepciones ya configurados
  - `/src/utils/error_handling.py` - Función `create_error_response()`
  - `/docs/07-manejo-de-errores.md` - Formatos de respuesta de error
- **📚 Documentación Context7**:
  - Sección 11.2: "Manejo de Errores en Pipeline"
  - Sección 11.3: "Respuestas HTTP Estructuradas"
- **🔧 Especificaciones de implementación**:
  - Envolver la llamada al controller en try/except
  - Capturar PipelineException y dejar que el handler global la maneje
  - Para errores de validación, usar ValidationError personalizada
  - Estructurar respuesta exitosa con campos estándar
  - Incluir siempre request_id en la respuesta
  - Agregar timestamp y versión del API

## 20.5. Optimizar para artículos largos (opcional background) [done]
### Dependencies: None
### Description: 
### Details:
- **📁 Documentos del repositorio**:
  - `/src/main.py` - Importar BackgroundTasks de FastAPI
  - `/src/controller.py` - Métricas de tiempo de procesamiento
  - `/docs/arquitectura_general.md` - Consideraciones de performance
- **📚 Documentación Context7**:
  - Sección 8.1: "Procesamiento Asíncrono en FastAPI"
  - Sección 8.2: "Background Tasks vs Workers"
- **🔧 Especificaciones de implementación**:
  - Medir longitud del contenido_texto
  - Si supera 10,000 caracteres, considerar background task
  - Por ahora, mantener síncrono pero agregar comentario TODO
  - Documentar el threshold en el código
  - Preparar estructura para futura implementación asíncrona

## 20.6. Test de Verificación Simple [done]
### Dependencies: None
### Description: 
### Details:
- **📁 Documentos del repositorio**:
  - `/tests/test_api/` - Crear test_procesar_articulo.py aquí
  - `/tests/conftest.py` - Fixtures compartidas de pytest
  - `/src/module_connector/src/models.py` - Ejemplo de ArticuloInItem
- **📚 Documentación Context7**:
  - Sección 13.3: "Testing de Endpoints con TestClient"
  - Sección 13.4: "Fixtures para Testing de API"
- **🔧 Especificaciones de implementación**:
  - Crear test con FastAPI TestClient
  - Test con artículo válido completo
  - Test con artículo sin campos requeridos
  - Test con contenido vacío
  - Verificar estructura de respuesta exitosa
  - Verificar códigos de estado HTTP correctos
  - Ejecutable con: pytest tests/test_api/test_procesar_articulo.py -v

