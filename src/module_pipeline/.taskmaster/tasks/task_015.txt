# Task ID: 15
# Title: Implement Phase 1: Preprocessing and Triage
# Status: done
# Dependencies: 5, 8, 12
# Priority: high
# Description: Create the first phase of the processing pipeline in src/pipeline/fase_1_triaje.py.
# Details:
1. Create src/pipeline/fase_1_triaje.py
2. Implement ejecutar_fase_1() function
3. Use spaCy for text cleaning and language detection
4. Integrate with Groq API using the prompt from 'Prompt_1_filtrado.md'
5. Implement logic for relevance evaluation and translation if necessary
6. Return ResultadoFase1 object with clean/translated text and initial evaluation

# Test Strategy:
Write unit tests with various input texts. Test language detection, cleaning, and relevance evaluation. Mock Groq API calls for testing.

# Subtasks:
## 1. Create Basic Structure for fase_1_triaje.py [done]
### Dependencies: None
### Description: Set up the initial file structure for the Phase 1 triage module with necessary imports and the ResultadoFase1 class definition.
### Details:
Create src/pipeline/fase_1_triaje.py file with imports for spaCy, Groq API client, and other required libraries. Define the ResultadoFase1 class with appropriate attributes: texto_limpio, idioma_detectado, es_relevante, puntuacion_relevancia, and texto_traducido.

## 2. Implement Text Cleaning and Language Detection [done]
### Dependencies: 15.1
### Description: Develop functions for text preprocessing and language detection using spaCy.
### Details:
Create functions for text cleaning (removing unnecessary whitespace, special characters, etc.) and language detection. Use spaCy's language models to identify the text language. Ensure proper handling of edge cases like very short texts or mixed language content.

## 3. Integrate Groq API for Relevance Evaluation [done]
### Dependencies: 15.1
### Description: Implement the connection to Groq API and use the prompt from Prompt_1_filtrado.md to evaluate text relevance.
### Details:
Create a function to connect to the Groq API, send the cleaned text with the prompt from Prompt_1_filtrado.md, and parse the response. Implement error handling for API failures and response parsing issues. Extract relevance score and decision from the API response.

## 4. Implement Translation Logic [done]
### Dependencies: 15.2
### Description: Add functionality to translate non-Spanish texts to Spanish when needed.
### Details:
Create a translation function that checks if the detected language is not Spanish and translates the text accordingly. Consider using a translation API or library. Implement proper error handling and fallback mechanisms for translation failures.

## 5. Implement ejecutar_fase_1() Function [done]
### Dependencies: 15.2, 15.3, 15.4
### Description: Create the main function that orchestrates the entire Phase 1 process and returns a ResultadoFase1 object.
### Details:
Implement the ejecutar_fase_1() function that takes input text, processes it through cleaning, language detection, relevance evaluation, and translation if necessary. Assemble and return a ResultadoFase1 object with all the required information. Include appropriate logging and error handling throughout the process.

