# Task ID: 2
# Title: Install and configure dependencies
# Status: done
# Dependencies: 1
# Priority: high
# Description: Install all required dependencies and configure the project settings, ensuring version consistency with existing modules.
# Details:
1. Install dependencies from requirements.txt using pip, referencing versions from module_connector and module_scraper for shared libraries:
   - fastapi==0.116.2
   - uvicorn[standard]==0.35.1
   - groq==0.26.0
   - spacy==3.8.7
   - sentence-transformers==2.9.0
   - supabase (use same version as in module_connector/module_scraper)
   - psycopg2-binary==2.9.10
   - pydantic (use same version as in module_connector/module_scraper)
   - python-dotenv==1.1.0
   - httpx==0.27.2
   - tenacity (use same version as in module_connector/module_scraper)
   - loguru (use same version as in module_connector/module_scraper)
   - numpy>=1.21.0,<2.0.0
2. Check module_connector and module_scraper repositories to identify the specific versions of shared libraries (supabase, tenacity, pydantic, loguru) to maintain consistency.
3. Update requirements.txt with the consistent versions.
4. Configure settings in src/config/settings.py to load environment variables.

# Test Strategy:
1. Run 'pip freeze' to verify all dependencies are installed correctly.
2. Compare versions of shared libraries with those in module_connector and module_scraper to ensure consistency.
3. Test importing key libraries in a Python shell to verify compatibility.

# Subtasks:
## 1. Review dependency versions in existing modules [done]
### Dependencies: None
### Description: Check module_connector and module_scraper repositories to identify the specific versions of shared libraries.
### Details:
üéØ OBJETIVO ESPEC√çFICO: 
Identificar las versiones exactas de las librer√≠as compartidas (supabase, tenacity, pydantic, loguru) utilizadas en module_connector y module_scraper para garantizar compatibilidad arquitect√≥nica y evitar conflictos de versiones que puedan causar fallos en integraci√≥n entre m√≥dulos.

üìö REFERENCIAS OBLIGATORIAS:
* Context7 ID: /supabase/supabase-py (Supabase Python SDK)
* Context7 ID: /jd/tenacity (Retry library)
* Context7 ID: /pydantic/pydantic (Data validation)
* Context7 ID: /delgan/loguru (Logging framework)
* Archivo: ../module_connector/requirements.txt (para versiones de referencia)
* Archivo: ../module_scraper/requirements.txt (para versiones de referencia)
* Documentaci√≥n: docs/08-configuracion-e-infraestructura.md (dependencias cr√≠ticas)
* Patr√≥n: Consistencia de versiones entre m√≥dulos del ecosistema La M√°quina de Noticias

‚öôÔ∏è IMPLEMENTACI√ìN GUIADA:
1. Navegar a ../module_connector/ y examinar requirements.txt para extraer versiones de: supabase, tenacity, pydantic, loguru
2. Navegar a ../module_scraper/ y examinar requirements.txt para las mismas librer√≠as
3. Crear tabla comparativa documentando versiones encontradas en cada m√≥dulo
4. Identificar conflictos potenciales o discrepancias entre versiones
5. Seleccionar versi√≥n m√°s restrictiva/estable para cada librer√≠a compartida
6. Documentar decisiones de versionado en archivo temporal version_analysis.md

‚úÖ CRITERIOS DE ACEPTACI√ìN:
* Versiones exactas identificadas para supabase, tenacity, pydantic, loguru en ambos m√≥dulos
* Tabla comparativa creada mostrando versiones por m√≥dulo
* Decisi√≥n documentada sobre versi√≥n final a usar para cada librer√≠a
* No hay conflictos de compatibilidad identificados entre versiones seleccionadas
* Verificaci√≥n de que las versiones son compatibles con Python 3.8+

‚ö†Ô∏è NOTAS CR√çTICAS:
* Priorizar versiones que mantengan compatibilidad con APIs ya implementadas en module_connector
* Si hay discrepancias, elegir versi√≥n m√°s reciente que sea compatible con ambos m√≥dulos
* Considerar que Supabase SDK debe ser compatible con RPCs existentes (insertar_articulo_completo, etc.)
* Loguru debe mantener formato de logs consistente con el ecosistema

## 2. Update requirements.txt with consistent versions [done]
### Dependencies: None
### Description: Modify requirements.txt to use the same versions of shared libraries (supabase, tenacity, pydantic, loguru) as in other modules.
### Details:
üéØ OBJETIVO ESPEC√çFICO:
Actualizar requirements.txt del module_pipeline con las versiones exactas identificadas en la subtarea anterior, asegurando compatibilidad total con module_connector y module_scraper para evitar conflictos de versiones durante la integraci√≥n.

üìö REFERENCIAS OBLIGATORIAS:
* Context7 ID: /tiangolo/fastapi (FastAPI framework)
* Context7 ID: /encode/uvicorn (ASGI server)
* Context7 ID: /groq/groq-typescript (Groq SDK)
* Archivo: version_analysis.md (resultado de subtarea 2.1)
* Archivo: requirements.txt (archivo actual a modificar)
* Documentaci√≥n: docs/08-configuracion-e-infraestructura.md (lista completa de dependencias)
* Patr√≥n: Versionado sem√°ntico y lock de versiones en ecosistema Python

‚öôÔ∏è IMPLEMENTACI√ìN GUIADA:
1. Usar resultados de version_analysis.md para identificar versiones finales
2. Actualizar requirements.txt manteniendo comentarios explicativos sobre Context7 IDs
3. Agrupar dependencias por categor√≠a (Web Framework, IA/ML, Base de Datos, etc.)
4. Mantener comentario IMPORTANTE sobre NumPy <2.0.0 para compatibilidad con spaCy
5. Verificar que todas las versiones espec√≠ficas est√°n documentadas con Context7 IDs
6. A√±adir notas de compatibilidad para dependencias cr√≠ticas

‚úÖ CRITERIOS DE ACEPTACI√ìN:
* requirements.txt actualizado con versiones exactas identificadas
* Todas las librer√≠as compartidas usan mismas versiones que otros m√≥dulos
* Comentarios Context7 IDs mantenidos para trazabilidad
* Nota cr√≠tica sobre NumPy <2.0.0 preservada
* Agrupaci√≥n por categor√≠as mantenida para legibilidad
* No hay dependencias duplicadas o conflictivas

‚ö†Ô∏è NOTAS CR√çTICAS:
* NO cambiar versiones de fastapi, uvicorn, groq que ya est√°n especificadas correctamente
* Mantener restricci√≥n numpy>=1.21.0,<2.0.0 para evitar conflictos con spaCy 3.8.7
* Verificar que versiones actualizadas no introduzcan breaking changes en APIs ya utilizadas
* Documentar cualquier cambio de versi√≥n que pueda afectar funcionalidad existente

## 3. Install dependencies with version consistency [done]
### Dependencies: None
### Description: Install all dependencies ensuring version consistency with existing modules.
### Details:
üéØ OBJETIVO ESPEC√çFICO:
Instalar todas las dependencias del module_pipeline usando las versiones actualizadas, verificando que la instalaci√≥n es exitosa y que no hay conflictos de versiones que comprometan la funcionalidad del sistema o la integraci√≥n con otros m√≥dulos.

üìö REFERENCIAS OBLIGATORIAS:
* Context7 ID: /python/pip (Package installer)
* Context7 ID: /explosion/spacy (NLP models download)
* Archivo: requirements.txt (versiones finales)
* Script: scripts/setup_env.py (para verificaci√≥n post-instalaci√≥n)
* Script: scripts/test_connections.py (para verificar conectividad)
* Documentaci√≥n: docs/08-configuracion-e-infraestructura.md (proceso de instalaci√≥n)
* Patr√≥n: Instalaci√≥n en entorno virtual aislado

‚öôÔ∏è IMPLEMENTACI√ìN GUIADA:
1. Verificar que entorno virtual est√° activo usando scripts/setup_env.py
2. Ejecutar pip install -r requirements.txt y capturar salida
3. Verificar instalaci√≥n exitosa con pip freeze > installed_versions.txt
4. Comparar versiones instaladas vs. requeridas para detectar discrepancias
5. Instalar modelos spaCy si USE_SPACY_FILTER=true: python -m spacy download es_core_news_lg
6. Ejecutar scripts/setup_env.py para verificaci√≥n completa post-instalaci√≥n
7. Ejecutar import tests b√°sicos para librer√≠as cr√≠ticas

‚úÖ CRITERIOS DE ACEPTACI√ìN:
* Todas las dependencias instaladas sin errores de pip
* Versiones instaladas coinciden exactamente con requirements.txt
* No hay advertencias de conflictos de versiones en pip
* scripts/setup_env.py pasa todas las verificaciones de dependencias
* Imports exitosos de fastapi, groq, supabase, pydantic, loguru, tenacity
* Modelos spaCy instalados si est√°n habilitados en configuraci√≥n
* Archivo installed_versions.txt generado para auditor√≠a

‚ö†Ô∏è NOTAS CR√çTICAS:
* Si pip reporta conflictos de versiones, DETENER y revisar requirements.txt
* NumPy debe instalarse como <2.0.0 para evitar problemas con spaCy
* No instalar dependencias globalmente - usar siempre entorno virtual
* Si falla instalaci√≥n de alguna dependencia, verificar compatibilidad con Python 3.8+
* Documentar cualquier warning o mensaje durante instalaci√≥n para troubleshooting futuro

