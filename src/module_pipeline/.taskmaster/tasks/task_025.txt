# Task ID: 25
# Title: Implement data validation and sanitization
# Status: done
# Dependencies: 4, 5, 6
# Priority: high
# Description: Enhance input data validation and sanitization throughout the pipeline, using existing validation patterns as a model.
# Details:
1. Use module_scraper/scraper_core/pipelines/validation.py as a reference model for implementing pipeline-specific data validation
2. Review all Pydantic models for comprehensive validation rules
3. Implement custom validators for complex data types, adapting existing validation patterns
4. Add data sanitization for user inputs (e.g., HTML escaping)
5. Ensure all pipeline phases validate their inputs and outputs consistently with the architectural patterns
6. Implement data integrity checks before database persistence
7. Maintain architectural consistency between containers by following established validation patterns

# Test Strategy:
Create a comprehensive test suite with various input data scenarios, including edge cases and malformed inputs. Verify that validation and sanitization work correctly at all stages. Ensure tests validate that the implementation follows the same architectural patterns as module_scraper/scraper_core/pipelines/validation.py.

# Subtasks:
## 1. Create Core Validation Module [done]
### Dependencies: None
### Description: Create a central validation module in /src/utils/validation.py with reusable sanitization functions and Pydantic validators
### Details:
- **📁 Documentos del repositorio**:
  - `/src/utils/error_handling.py` - [Revisar ValidationError y patrones de manejo]
  - `/src/models/entrada.py` - [Analizar validaciones existentes como modelo]
  - `/src/models/procesamiento.py` - [Identificar patrones de validación a replicar]
- **📚 Documentación Context7**:
  - Pydantic V2: "Validators" - [Uso de field_validator y model_validator]
  - Pydantic V2: "Custom Data Types" - [Crear tipos reutilizables]
- **🔧 Especificaciones de implementación**:
  - Crear archivo `/src/utils/validation.py`
  - Implementar funciones de sanitización básicas (escape_html, clean_text, normalize_whitespace)
  - Crear validadores Pydantic reutilizables (non_empty_string, safe_html_string)
  - Implementar función validate_input_data() para validación inicial
  - Manejo de errores debe usar ValidationError existente

## 2. Implement Phase 1 (Triage) Validation [done]
### Dependencies: 25.1
### Description: Add validation for FragmentoProcesableItem, sanitize text before Groq API calls, and validate LLM responses
### Details:
- **📁 Documentos del repositorio**:
  - `/src/pipeline/fase_1_triaje.py` - [Identificar puntos de entrada de datos]
  - `/src/models/entrada.py` - [FragmentoProcesableItem validaciones]
  - `/src/utils/validation.py` - [Usar funciones creadas en 25.1]
- **📚 Documentación Context7**:
  - FastAPI: "Request Body" - [Validación automática con Pydantic]
  - Pydantic V2: "Field Functions" - [Configuración de campos]
- **🔧 Especificaciones de implementación**:
  - Validar FragmentoProcesableItem antes de procesamiento
  - Sanitizar texto_original antes de enviar a Groq
  - Validar respuesta del LLM antes de parsear
  - Añadir validación de idioma detectado
  - Usar try/except con fallbacks existentes

## 3. Implement Phase 2 (Extraction) Validation [done]
### Dependencies: 25.1
### Description: Validate LLM JSON output, sanitize fact/entity texts, verify offsets and confidence values
### Details:
- **📁 Documentos del repositorio**:
  - `/src/pipeline/fase_2_extraccion.py` - [Puntos de validación para hechos/entidades]
  - `/src/models/procesamiento.py` - [HechoProcesado, EntidadProcesada]
  - `/src/utils/parsing_helpers.py` - [Integrar validación en parseo]
- **📚 Documentación Context7**:
  - Pydantic V2: "Serialization" - [Validación en serialización]
  - Python: "html.escape" - [Sanitización HTML]
- **🔧 Especificaciones de implementación**:
  - Validar estructura JSON de respuesta LLM
  - Sanitizar texto_original_del_hecho y texto_entidad
  - Validar offsets sean coherentes con texto
  - Verificar confianza_extraccion en rango [0,1]
  - Aplicar escape HTML a campos de texto

## 4. Implement Validation for Phases 3 and 4 [done]
### Dependencies: 25.1
### Description: Validate dates in citations, numeric values in data, Wikidata URIs, and sanitize entity names
### Details:
- **📁 Documentos del repositorio**:
  - `/src/pipeline/fase_3_citas_datos.py` - [Validación de citas y datos cuantitativos]
  - `/src/pipeline/fase_4_normalizacion.py` - [Validación de entidades normalizadas]
  - `/src/models/metadatos.py` - [Validaciones en modelos de metadatos]
- **📚 Documentación Context7**:
  - Pydantic V2: "Computed Fields" - [Validaciones derivadas]
  - Python: "unicodedata" - [Normalización de texto Unicode]
- **🔧 Especificaciones de implementación**:
  - Validar formato de fechas en citas y datos
  - Verificar valores numéricos en datos cuantitativos
  - Validar URIs de Wikidata sean URLs válidas
  - Sanitizar nombres de entidades normalizadas
  - Verificar consistencia de IDs entre fases

## 5. Implement Pre-Persistence Validation in Payload Builder [done]
### Dependencies: 25.1, 25.2, 25.3, 25.4
### Description: Validate complete payload, referential integrity, and database-compatible data types
### Details:
- **📁 Documentos del repositorio**:
  - `/src/services/payload_builder.py` - [Punto crítico de validación final]
  - `/src/services/supabase_service.py` - [Validaciones antes de RPC]
  - `/docs/Persistencia/` - [Esquemas de tablas destino]
- **📚 Documentación Context7**:
  - Supabase: "Database Functions" - [Constraints y validaciones DB]
  - Pydantic V2: "JSON Schema" - [Generación de esquemas]
- **🔧 Especificaciones de implementación**:
  - Validar payload completo antes de enviar a Supabase
  - Verificar integridad referencial (todos los IDs existen)
  - Validar tipos de datos coincidan con esquema DB
  - Implementar checksum de datos críticos
  - Log detallado de validaciones fallidas

## 6. Create Simple Validation Tests [done]
### Dependencies: 25.1, 25.2, 25.3, 25.4, 25.5
### Description: Develop test_validation_simple.py with tests for sanitization, custom validations, and end-to-end validation
### Details:
- **📁 Documentos del repositorio**:
  - `/tests/test_utils/` - [Crear test_validation.py]
  - `/src/utils/validation.py` - [Módulo a testear]
  - Todos los archivos modificados en subtareas anteriores
- **📚 Documentación Context7**:
  - Pytest: "Fixtures" - [Datos de prueba reutilizables]
  - Pytest: "Parametrize" - [Tests con múltiples casos]
- **🔧 Especificaciones de implementación**:
  - Crear script `test_validation_simple.py`
  - Test de sanitización HTML con casos maliciosos
  - Test de validaciones Pydantic customizadas
  - Test de validación end-to-end con datos reales
  - Verificar que validaciones no rompen casos válidos
  - Output claro: "✅ Validación funcionando" o "❌ Error: [detalles]"

