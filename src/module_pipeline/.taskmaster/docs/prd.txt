# Product Requirements Document: Module Pipeline - La Máquina de Noticias

## 1. VISIÓN GENERAL DEL PRODUCTO

### Propósito
El `module_pipeline` es el núcleo de análisis e inteligencia del sistema "La Máquina de Noticias". Su responsabilidad es recibir contenido textual (artículos de noticias o fragmentos de documentos) y, mediante una secuencia de fases de procesamiento con LLMs, extraer, estructurar, validar y normalizar la información para su persistencia en base de datos.

### Arquitectura del Sistema
- **Framework Web**: FastAPI con Uvicorn para API REST
- **IA/ML**: Groq API como LLM principal, spaCy para procesamiento de texto, sentence-transformers para embeddings
- **Base de Datos**: Supabase/PostgreSQL con esquema complejo y RPCs específicas
- **Validación**: Pydantic para modelos de datos robustos
- **Manejo de Errores**: tenacity para retry logic, loguru para logging estructurado

## 2. REQUERIMIENTOS FUNCIONALES PRINCIPALES

### 2.1 API REST con FastAPI
**Endpoints Requeridos:**
- `POST /procesar_articulo` - Procesa artículos completos desde module_connector
- `POST /procesar_fragmento` - Procesa fragmentos de documentos desde module_ingestion_engine
- `GET /health` - Health check endpoint
- `GET /status/{job_id}` - Consulta estado de procesamiento

**Modelos de Entrada:**
- `ArticuloInItem`: Modelo completo según especificación del module_connector
- `FragmentoProcesableItem`: Modelo para fragmentos de documentos extensos

### 2.2 Pipeline de Procesamiento en 4 Fases Secuenciales

#### Fase 1: Preprocesamiento y Triaje
- **Función**: `ejecutar_fase_1()`
- **Objetivo**: Limpiar texto, detectar idioma, traducir si necesario, evaluar relevancia
- **LLM**: Groq API con prompt `Prompt_1_ filtrado.md`
- **Salida**: Decisión procesar/descartar, texto limpio/traducido, evaluación inicial

#### Fase 2: Extracción de Elementos Básicos
- **Función**: `ejecutar_fase_2()`
- **Objetivo**: Identificar y extraer hechos principales y entidades mencionadas
- **LLM**: Groq API con prompt `Prompt_2_elementos_basicos.md`
- **Salida**: Lista de HechoBase y EntidadBase con IDs temporales

#### Fase 3: Extracción de Citas y Datos Cuantitativos
- **Función**: `ejecutar_fase_3()`
- **Objetivo**: Extraer citas textuales directas y datos numéricos estructurados
- **LLM**: Groq API con prompt `Prompt_3_citas_datos.md`
- **Salida**: Lista de CitaTextual y DatosCuantitativos con referencias

#### Fase 4: Normalización, Vinculación y Relaciones
- **Función**: `ejecutar_fase_4()`
- **Objetivo**: Consolidar información, vincular entidades a BD, extraer relaciones
- **LLM**: Groq API con prompt `Prompt_4_relaciones.md`
- **BD**: Consultas a cache_entidades y RPCs de búsqueda
- **Salida**: ResultadoFase4 con todos los elementos normalizados

### 2.3 Sistema de Persistencia en Supabase

#### RPCs de Persistencia Requeridas:
- `insertar_articulo_completo()` - Persistencia completa de artículos procesados
- `insertar_fragmento_completo()` - Persistencia completa de fragmentos procesados

#### Tablas de Destino (11 tablas principales):
1. `articulos` - Información central de artículos
2. `fragmentos` - Fragmentos de documentos extensos
3. `hechos` - Hechos extraídos individuales
4. `entidades` - Entidades únicas normalizadas
5. `hecho_entidad` - Relaciones hechos-entidades
6. `hecho_articulo` - Relaciones hechos-fuentes
7. `citas_textuales` - Citas directas extraídas
8. `datos_cuantitativos` - Datos numéricos estructurados
9. `relaciones_hechos` - Relaciones entre hechos
10. `relaciones_entidades` - Relaciones entre entidades
11. `contradicciones` - Contradicciones detectadas

### 2.4 Modelos Pydantic Completos

#### Modelos de Entrada:
- `ArticuloInItem` (según especificación module_connector)
- `FragmentoProcesableItem` (para documentos extensos)

#### Modelos de Procesamiento:
- `HechoBase`, `HechoProcesado`
- `EntidadBase`, `EntidadProcesada`
- `CitaTextual`, `DatosCuantitativos`
- `ResultadoFase1`, `ResultadoFase2`, `ResultadoFase3`, `ResultadoFase4`

#### Modelos de Persistencia:
- Payloads JSONB para RPCs según especificación completa de persistencia

### 2.5 Integración con Groq API

#### Configuración Requerida:
- Soporte completo para SDK Groq v0.26.0
- Variables de entorno: GROQ_API_KEY, MODEL_ID, API_TIMEOUT, etc.
- Manejo robusto de errores: timeouts, rate limits, respuestas malformadas
- Retry logic con backoff exponencial usando tenacity

#### Procesamiento de Respuestas:
- Limpieza y parseo de JSON usando json-repair
- Validación Pydantic completa de respuestas LLM
- Logging detallado de interacciones

## 3. REQUERIMIENTOS NO FUNCIONALES

### 3.1 Robustez y Confiabilidad
- **Manejo de Errores Completo**: Cada fase debe manejar todos los errores posibles
- **Retry Logic**: Reintentos automáticos para fallos transitorios
- **Validación Estricta**: Validación Pydantic en todos los puntos de datos
- **Logging Estructurado**: Logging detallado con loguru para debugging

### 3.2 Rendimiento
- **Procesamiento Asíncrono**: FastAPI async/await para concurrencia
- **Optimización de BD**: Uso de RPCs específicas para operaciones complejas
- **Caché de Entidades**: Aprovechamiento de cache_entidades para normalización

### 3.3 Configurabilidad
- **Prompts Externos**: Todos los prompts LLM en archivos externos
- **Variables de Entorno**: Configuración completa via environment variables
- **Parámetros Ajustables**: Temperature, max_tokens, timeouts configurables

## 4. REQUERIMIENTOS TÉCNICOS ESPECÍFICOS

### 4.1 Estructura de Directorios Requerida
```
module_pipeline/
├── src/
│   ├── main.py                    # FastAPI application entry point
│   ├── controller.py              # Main processing controller
│   ├── models/                    # Pydantic models
│   │   ├── entrada.py            # Input models
│   │   ├── procesamiento.py      # Processing models
│   │   └── persistencia.py       # Persistence models
│   ├── pipeline/                  # Core pipeline phases
│   │   ├── fase_1_triaje.py
│   │   ├── fase_2_extraccion.py
│   │   ├── fase_3_citas_datos.py
│   │   └── fase_4_normalizacion.py
│   ├── services/                  # External services
│   │   ├── groq_service.py       # Groq API integration
│   │   └── supabase_service.py   # Supabase integration
│   ├── utils/                     # Utilities
│   │   ├── error_handling.py     # Error handling utilities
│   │   ├── logging_config.py     # Logging configuration
│   │   └── prompt_loader.py      # Prompt file loader
│   └── config/                    # Configuration
│       └── settings.py           # Application settings
├── docs/                          # Existing documentation
├── requirements.txt               # Dependencies specified
└── .env.example                   # Environment variables template
```

### 4.2 Dependencias Específicas
**Según requirements.txt existente:**
- fastapi==0.116.2, uvicorn[standard]==0.35.1
- groq==0.26.0, spacy==3.8.7, sentence-transformers==2.9.0
- supabase==2.15.2, psycopg2-binary==2.9.10
- pydantic==2.11.5, python-dotenv==1.1.0
- httpx==0.27.2, tenacity==9.1.2, loguru==0.7.3
- numpy>=1.21.0,<2.0.0 (compatibilidad con spaCy)

### 4.3 Configuración de Entorno
**Variables Requeridas:**
- GROQ_API_KEY, MODEL_ID, API_TIMEOUT, API_TEMPERATURE
- SUPABASE_URL, SUPABASE_KEY
- LOG_LEVEL, MAX_RETRIES, MAX_WAIT_SECONDS

## 5. CRITERIOS DE ACEPTACIÓN

### 5.1 Funcionalidad Completa
- ✅ API REST completamente funcional con todos los endpoints
- ✅ 4 fases del pipeline implementadas según especificación exacta
- ✅ Integración completa con Groq API usando prompts externos
- ✅ Persistencia completa en Supabase usando RPCs especificadas
- ✅ Modelos Pydantic completos para validación robusta

### 5.2 Robustez
- ✅ Manejo completo de errores en todas las fases
- ✅ Retry logic implementado para fallos transitorios
- ✅ Logging estructurado para debugging y monitoreo
- ✅ Validación estricta de datos en todos los puntos

### 5.3 Conformidad con Especificación
- ✅ Implementación exacta según documentación existente
- ✅ Sin funcionalidades adicionales no especificadas
- ✅ Estructura de datos que mapea perfectamente a esquema BD
- ✅ Compatibilidad completa con module_connector y module_ingestion_engine

## 6. FILOSOFÍA DE IMPLEMENTACIÓN

**"Implementación sólida y robusta, sin partes móviles innecesarias y frágiles"**

- **Adherencia Estricta**: Implementar exactamente lo especificado, ni más ni menos
- **Robustez Primera**: Priorizar manejo de errores y validación sobre features adicionales
- **Simplicidad Operacional**: Evitar abstracciones innecesarias o patrones complejos
- **Confiabilidad**: Cada componente debe ser predecible y mantener estado consistente
- **Mantenibilidad**: Código claro que refleje directamente la especificación documentada

Este PRD captura la totalidad de requerimientos para una implementación completa y robusta del module_pipeline según la documentación existente.