#!/usr/bin/env python3
"""
Test simplificado de integraci√≥n con Supabase desde el directorio del scraper.
"""

import os
import sys
import unittest
import logging
from datetime import datetime, timezone
import uuid
from pathlib import Path

# Add the scraper directory to Python path
scraper_dir = Path(__file__).parent.parent
sys.path.insert(0, str(scraper_dir))

# Load environment variables from project root
from dotenv import load_dotenv
project_root = scraper_dir.parent.parent
env_file = project_root / '.env'
if env_file.exists():
    load_dotenv(env_file)
    print(f"‚úÖ Loaded environment variables from {env_file}")
else:
    print(f"‚ö†Ô∏è  Environment file not found: {env_file}")

# Now import from the scraper modules
from scraper_core.utils.supabase_client import SupabaseClient
from scraper_core.pipelines.storage import SupabaseStoragePipeline
from scraper_core.items import ArticuloInItem

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TestSupabaseSimple(unittest.TestCase):
    """Simplified Supabase integration test."""

    def setUp(self):
        """Set up for each test."""
        # Check environment variables
        self.supabase_url = os.getenv('SUPABASE_URL')
        self.supabase_key = os.getenv('SUPABASE_KEY')
        
        print(f"\nüîç SUPABASE_URL: {self.supabase_url}")
        print(f"üîç SUPABASE_KEY: {'***' + self.supabase_key[-10:] if self.supabase_key else 'None'}")
        
        if not self.supabase_url or not self.supabase_key:
            self.skipTest("SUPABASE_URL and SUPABASE_KEY must be set")
        
        # Initialize client
        self.client = SupabaseClient()
        print(f"‚úÖ SupabaseClient initialized")

    def test_supabase_connection(self):
        """Test basic Supabase connection."""
        print("\nüß™ Testing Supabase connection...")
        
        try:
            # Try a simple query to check connection
            response = self.client.client.table('articulos_beta').select('count').limit(1).execute()
            print(f"‚úÖ Connection successful: {len(response.data)} records found")
            self.assertIsNotNone(response)
        except Exception as e:
            self.fail(f"‚ùå Supabase connection failed: {e}")

    def test_create_bucket(self):
        """Test creating a bucket."""
        print("\nüß™ Testing bucket creation...")
        
        bucket_name = f"test-bucket-{uuid.uuid4().hex[:8]}"
        
        try:
            result = self.client.create_bucket_if_not_exists(bucket_name)
            print(f"‚úÖ Bucket creation result: {result}")
            
            # Cleanup: try to delete the test bucket
            try:
                self.client.client.storage.delete_bucket(bucket_name)
                print(f"üßπ Test bucket {bucket_name} cleaned up")
            except:
                print(f"‚ö†Ô∏è  Could not clean up test bucket {bucket_name}")
                
        except Exception as e:
            print(f"‚ùå Bucket creation failed: {e}")
            # Don't fail the test if it's just a permissions issue
            if "already exists" in str(e).lower():
                print("‚úÖ Bucket already exists (this is OK)")
            else:
                self.fail(f"Bucket creation failed: {e}")

    def test_article_upsert(self):
        """Test upserting an article."""
        print("\nüß™ Testing article upsert...")
        
        test_id = str(uuid.uuid4())
        test_data = {
            'url': f'http://test.example.com/article-{test_id}',
            'titulo': f'Test Article {test_id}',
            'medio_nombre': 'Test Medio',
            'fecha_extraccion': datetime.now(timezone.utc).isoformat(),
            'categoria_principal': 'Test',
            'contenido_texto': f'Test content for article {test_id}',
        }
        
        try:
            result = self.client.upsert_articulo(test_data)
            print(f"‚úÖ Article upserted successfully: {result}")
            self.assertIsNotNone(result)
            
            # Verify the article exists
            response = self.client.client.table('articulos_beta') \
                .select('url, titulo') \
                .eq('url', test_data['url']) \
                .execute()
            
            self.assertEqual(len(response.data), 1)
            self.assertEqual(response.data[0]['titulo'], test_data['titulo'])
            print(f"‚úÖ Article verified in database")
            
            # Cleanup: delete the test article
            try:
                self.client.client.table('articulos_beta') \
                    .delete() \
                    .eq('url', test_data['url']) \
                    .execute()
                print(f"üßπ Test article cleaned up")
            except:
                print(f"‚ö†Ô∏è  Could not clean up test article")
                
        except Exception as e:
            self.fail(f"‚ùå Article upsert failed: {e}")

    def test_pipeline_integration(self):
        """Test the full pipeline integration."""
        print("\nüß™ Testing pipeline integration...")
        
        # Create mock crawler for pipeline
        class MockCrawler:
            def __init__(self):
                self.settings = {}
            
            def get(self, key, default=None):
                return self.settings.get(key, default)
        
        # Initialize pipeline
        mock_crawler = MockCrawler()
        mock_crawler.settings = {
            'SUPABASE_STORAGE_BUCKET': 'test-articulos-html',
            'TENACITY_STOP_AFTER_ATTEMPT': 1,  # Fast fail for tests
            'TENACITY_WAIT_MIN': 0.1,
            'TENACITY_WAIT_MAX': 0.5
        }
        
        try:
            pipeline = SupabaseStoragePipeline.from_crawler(mock_crawler)
            print(f"‚úÖ Pipeline initialized")
            
            # Create test item
            test_id = str(uuid.uuid4())
            item = ArticuloInItem()
            item['url'] = f'http://test.example.com/pipeline-{test_id}'
            item['titulo'] = f'Pipeline Test {test_id}'
            item['medio'] = 'Test Medio'
            item['categoria_principal'] = 'Test'
            item['contenido_html'] = f'<html><body><h1>Test {test_id}</h1></body></html>'
            item['fecha_publicacion'] = datetime.now(timezone.utc).isoformat()
            item['autores'] = []
            item['etiquetas'] = []
            
            # Process item through pipeline
            pipeline.open_spider(None)
            processed_item = pipeline.process_item(item, None)
            pipeline.close_spider(None)
            
            print(f"‚úÖ Item processed through pipeline")
            
            # Check for errors
            if hasattr(processed_item, 'get') and processed_item.get('error_detalle'):
                print(f"‚ö†Ô∏è  Pipeline reported error: {processed_item['error_detalle']}")
            else:
                print(f"‚úÖ No pipeline errors detected")
                
            # Verify in database
            response = self.client.client.table('articulos_beta') \
                .select('url, titulo') \
                .eq('url', item['url']) \
                .execute()
            
            if len(response.data) > 0:
                print(f"‚úÖ Article found in database via pipeline")
                
                # Cleanup
                try:
                    self.client.client.table('articulos_beta') \
                        .delete() \
                        .eq('url', item['url']) \
                        .execute()
                    print(f"üßπ Pipeline test article cleaned up")
                except:
                    print(f"‚ö†Ô∏è  Could not clean up pipeline test article")
            else:
                print(f"‚ö†Ô∏è  Article not found in database (may be expected if storage failed)")
                
        except Exception as e:
            print(f"‚ùå Pipeline integration failed: {e}")
            # Don't fail the test if it's just storage permissions
            if "storage" in str(e).lower() or "bucket" in str(e).lower():
                print("‚ö†Ô∏è  Storage test failed (may be permissions issue)")
            else:
                self.fail(f"Pipeline integration failed: {e}")

if __name__ == '__main__':
    print("üß™ SUPABASE INTEGRATION TEST")
    print("=" * 50)
    unittest.main(verbosity=2)
