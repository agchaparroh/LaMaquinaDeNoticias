"""
test_service_restart.py
Test de Resiliencia: Recuperaci√≥n despu√©s de ca√≠da de servicios

Valida la recuperaci√≥n del sistema cuando servicios se reinician:
1. Detecci√≥n de servicios ca√≠dos
2. Reconexi√≥n autom√°tica
3. Procesamiento de trabajos pendientes
4. Sincronizaci√≥n de estado
5. Prevenci√≥n de duplicados
"""

import pytest
import asyncio
import time
from datetime import datetime, timedelta
from unittest.mock import Mock, patch
import json
import os
import tempfile


class ServiceRestartScenario:
    """Simula escenarios de ca√≠da y recuperaci√≥n de servicios"""
    
    def __init__(self):
        self.services = {
            "scraper": {"status": "running", "restart_count": 0},
            "connector": {"status": "running", "restart_count": 0},
            "pipeline": {"status": "running", "restart_count": 0},
            "dashboard": {"status": "running", "restart_count": 0}
        }
        
        self.pending_work = {
            "scraper": [],
            "connector": [],
            "pipeline": []
        }
        
        self.processed_items = set()  # Para evitar duplicados
        self.recovery_log = []
        
    def simulate_service_crash(self, service_name: str):
        """Simula la ca√≠da de un servicio"""
        if service_name in self.services:
            self.services[service_name]["status"] = "crashed"
            self.recovery_log.append({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "crash",
                "service": service_name
            })
            print(f"üí• Servicio {service_name} ha ca√≠do")
    
    def simulate_service_restart(self, service_name: str):
        """Simula el reinicio de un servicio"""
        if service_name in self.services and self.services[service_name]["status"] == "crashed":
            self.services[service_name]["status"] = "restarting"
            self.services[service_name]["restart_count"] += 1
            
            # Simular tiempo de inicio
            time.sleep(0.5)
            
            self.services[service_name]["status"] = "running"
            self.recovery_log.append({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "restart",
                "service": service_name,
                "restart_count": self.services[service_name]["restart_count"]
            })
            print(f"üîÑ Servicio {service_name} reiniciado (intento #{self.services[service_name]['restart_count']})")
    
    def add_pending_work(self, service: str, work_item: dict):
        """Agrega trabajo pendiente para un servicio"""
        if service in self.pending_work:
            self.pending_work[service].append(work_item)
    
    async def process_pending_work(self, service: str) -> dict:
        """Procesa trabajo pendiente despu√©s de recuperaci√≥n"""
        if service not in self.pending_work:
            return {"processed": 0, "duplicates": 0}
        
        processed = 0
        duplicates = 0
        
        for item in self.pending_work[service]:
            item_id = item.get("id", str(item))
            
            if item_id in self.processed_items:
                duplicates += 1
                print(f"   ‚ö†Ô∏è Duplicado detectado: {item_id}")
            else:
                self.processed_items.add(item_id)
                processed += 1
                print(f"   ‚úÖ Procesado: {item_id}")
        
        # Limpiar trabajo pendiente
        self.pending_work[service] = []
        
        return {"processed": processed, "duplicates": duplicates}


def test_connector_recovery_after_crash():
    """Test: Connector se recupera y procesa archivos pendientes"""
    
    scenario = ServiceRestartScenario()
    
    print("\nüîå Test: Recuperaci√≥n del Connector despu√©s de ca√≠da\n")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        # GIVEN: Archivos pendientes cuando el Connector cae
        pending_files = []
        for i in range(3):
            filename = f"articulos_pending_{i+1}.json.gz"
            filepath = os.path.join(temp_dir, filename)
            with open(filepath, 'w') as f:
                f.write(f"test content {i+1}")
            pending_files.append(filename)
            
            # Agregar a trabajo pendiente
            scenario.add_pending_work("connector", {
                "id": filename,
                "path": filepath,
                "created_at": datetime.utcnow().isoformat()
            })
        
        print(f"üìÅ Creados {len(pending_files)} archivos pendientes")
        
        # WHEN: Connector cae y se reinicia
        print("\n1Ô∏è‚É£ Simulando ca√≠da del Connector...")
        scenario.simulate_service_crash("connector")
        assert scenario.services["connector"]["status"] == "crashed"
        
        # Simular que llegan m√°s archivos mientras est√° ca√≠do
        print("\n2Ô∏è‚É£ Archivos acumul√°ndose durante la ca√≠da...")
        for i in range(2):
            filename = f"articulos_during_crash_{i+1}.json.gz"
            scenario.add_pending_work("connector", {
                "id": filename,
                "created_at": datetime.utcnow().isoformat()
            })
        
        print(f"   üìà Total archivos pendientes: {len(scenario.pending_work['connector'])}")
        
        # Reiniciar servicio
        print("\n3Ô∏è‚É£ Reiniciando Connector...")
        scenario.simulate_service_restart("connector")
        assert scenario.services["connector"]["status"] == "running"
        
        # THEN: Procesar trabajo pendiente
        print("\n4Ô∏è‚É£ Procesando archivos pendientes...")
        results = asyncio.run(scenario.process_pending_work("connector"))
        
        print(f"\nüìä Resultados de recuperaci√≥n:")
        print(f"   - Archivos procesados: {results['processed']}")
        print(f"   - Duplicados evitados: {results['duplicates']}")
        print(f"   - Estado del servicio: {scenario.services['connector']['status']}")
        
        assert results["processed"] == 5  # 3 originales + 2 durante ca√≠da
        assert results["duplicates"] == 0
        assert len(scenario.pending_work["connector"]) == 0  # Cola vac√≠a


def test_pipeline_recovery_with_deduplication():
    """Test: Pipeline evita procesar art√≠culos duplicados tras reinicio"""
    
    scenario = ServiceRestartScenario()
    
    print("\nüîÑ Test: Pipeline con deduplicaci√≥n tras reinicio\n")
    
    # GIVEN: Art√≠culos en proceso cuando Pipeline cae
    articles_in_flight = [
        {"id": "art-001", "url": "https://example.com/1", "status": "processing"},
        {"id": "art-002", "url": "https://example.com/2", "status": "processing"},
        {"id": "art-003", "url": "https://example.com/3", "status": "completed"}
    ]
    
    # Simular que algunos ya fueron procesados
    scenario.processed_items.add("art-003")
    
    print("üìù Estado inicial:")
    print(f"   - Art√≠culos en proceso: {len(articles_in_flight)}")
    print(f"   - Ya procesados: {len(scenario.processed_items)}")
    
    # WHEN: Pipeline cae durante procesamiento
    print("\n1Ô∏è‚É£ Pipeline cae durante procesamiento...")
    scenario.simulate_service_crash("pipeline")
    
    # Agregar art√≠culos a reprocesar
    for article in articles_in_flight:
        scenario.add_pending_work("pipeline", article)
    
    # El Connector podr√≠a reenviar algunos art√≠culos
    print("\n2Ô∏è‚É£ Connector reenv√≠a art√≠culos (posibles duplicados)...")
    scenario.add_pending_work("pipeline", {"id": "art-001", "url": "https://example.com/1"})  # Duplicado
    scenario.add_pending_work("pipeline", {"id": "art-004", "url": "https://example.com/4"})  # Nuevo
    
    # Reiniciar Pipeline
    print("\n3Ô∏è‚É£ Reiniciando Pipeline...")
    scenario.simulate_service_restart("pipeline")
    
    # THEN: Procesar con deduplicaci√≥n
    print("\n4Ô∏è‚É£ Procesando con deduplicaci√≥n...")
    results = asyncio.run(scenario.process_pending_work("pipeline"))
    
    print(f"\nüìä Resultados:")
    print(f"   - Procesados nuevos: {results['processed']}")
    print(f"   - Duplicados evitados: {results['duplicates']}")
    print(f"   - Total √∫nicos procesados: {len(scenario.processed_items)}")
    
    assert results["processed"] == 3  # art-001, art-002, art-004
    assert results["duplicates"] == 2  # art-003 ya procesado, art-001 duplicado


def test_cascading_recovery():
    """Test: Recuperaci√≥n en cascada cuando m√∫ltiples servicios caen"""
    
    scenario = ServiceRestartScenario()
    
    print("\nüåä Test: Recuperaci√≥n en cascada de m√∫ltiples servicios\n")
    
    async def simulate_cascading_failure():
        """Simula fallo en cascada y recuperaci√≥n"""
        
        # 1. Pipeline cae primero
        print("üí• FALLO EN CASCADA:")
        print("1Ô∏è‚É£ Pipeline cae...")
        scenario.simulate_service_crash("pipeline")
        await asyncio.sleep(0.2)
        
        # 2. Connector detecta y tambi√©n falla
        print("2Ô∏è‚É£ Connector detecta Pipeline ca√≠do y falla...")
        scenario.simulate_service_crash("connector")
        await asyncio.sleep(0.2)
        
        # 3. Dashboard pierde conexi√≥n
        print("3Ô∏è‚É£ Dashboard pierde conexi√≥n con backend...")
        scenario.simulate_service_crash("dashboard")
        
        # Estado del sistema
        crashed_services = [s for s, info in scenario.services.items() 
                          if info["status"] == "crashed"]
        print(f"\n‚ö†Ô∏è Servicios ca√≠dos: {', '.join(crashed_services)}")
        
        # RECUPERACI√ìN EN ORDEN
        print("\nüîß RECUPERACI√ìN EN ORDEN:")
        
        # 1. Primero Pipeline (dependencia base)
        print("\n1Ô∏è‚É£ Recuperando Pipeline...")
        scenario.simulate_service_restart("pipeline")
        await asyncio.sleep(0.3)
        
        # 2. Luego Connector
        print("\n2Ô∏è‚É£ Recuperando Connector...")
        scenario.simulate_service_restart("connector")
        
        # Verificar que Connector espera a Pipeline
        print("   üîç Connector verifica Pipeline...")
        if scenario.services["pipeline"]["status"] == "running":
            print("   ‚úÖ Pipeline disponible - Connector puede proceder")
        
        await asyncio.sleep(0.3)
        
        # 3. Finalmente Dashboard
        print("\n3Ô∏è‚É£ Recuperando Dashboard...")
        scenario.simulate_service_restart("dashboard")
        
        return crashed_services
    
    crashed = asyncio.run(simulate_cascading_failure())
    
    # Verificar recuperaci√≥n completa
    all_running = all(info["status"] == "running" 
                     for info in scenario.services.values())
    
    print(f"\nüìä Estado final del sistema:")
    for service, info in scenario.services.items():
        status_icon = "‚úÖ" if info["status"] == "running" else "‚ùå"
        print(f"   {status_icon} {service}: {info['status']} (reinicios: {info['restart_count']})")
    
    assert all_running, "Todos los servicios deber√≠an estar ejecut√°ndose"
    assert len(crashed) == 3, "Tres servicios deber√≠an haber ca√≠do"


def test_health_check_monitoring():
    """Test: Sistema de health checks para detecci√≥n temprana"""
    
    print("\nüè• Test: Monitoreo con health checks\n")
    
    class HealthMonitor:
        def __init__(self):
            self.health_checks = {}
            self.failure_threshold = 3
            self.check_interval = 1  # segundos
            
        async def check_service_health(self, service: str) -> dict:
            """Realiza health check de un servicio"""
            # Simular diferentes tipos de checks
            checks = {
                "ping": await self.ping_check(service),
                "memory": await self.memory_check(service),
                "response_time": await self.response_time_check(service)
            }
            
            # Calcular salud general
            healthy_checks = sum(1 for check in checks.values() if check["healthy"])
            overall_health = healthy_checks / len(checks)
            
            return {
                "service": service,
                "timestamp": datetime.utcnow().isoformat(),
                "overall_health": overall_health,
                "checks": checks,
                "status": "healthy" if overall_health > 0.6 else "unhealthy"
            }
        
        async def ping_check(self, service: str) -> dict:
            """Check de conectividad b√°sica"""
            # Simular respuesta
            success = service != "pipeline" or time.time() % 3 != 0
            return {
                "healthy": success,
                "response_time_ms": 50 if success else None
            }
        
        async def memory_check(self, service: str) -> dict:
            """Check de uso de memoria"""
            # Simular uso de memoria
            memory_usage = 45 + (hash(service) % 40)
            return {
                "healthy": memory_usage < 80,
                "usage_percent": memory_usage
            }
        
        async def response_time_check(self, service: str) -> dict:
            """Check de tiempo de respuesta"""
            # Simular tiempo de respuesta variable
            base_time = 100
            if service == "pipeline":
                response_time = base_time + (time.time() % 200)
            else:
                response_time = base_time + (hash(service) % 50)
            
            return {
                "healthy": response_time < 250,
                "response_time_ms": response_time
            }
        
        async def monitor_services(self, services: list, duration: int = 5):
            """Monitorea servicios por un per√≠odo"""
            monitoring_results = []
            
            for i in range(duration):
                print(f"\nüîç Health check round {i+1}/{duration}")
                
                for service in services:
                    health = await self.check_service_health(service)
                    monitoring_results.append(health)
                    
                    status_icon = "‚úÖ" if health["status"] == "healthy" else "‚ö†Ô∏è"
                    print(f"   {status_icon} {service}: {health['overall_health']:.0%} healthy")
                    
                    if health["status"] == "unhealthy":
                        failing_checks = [name for name, check in health["checks"].items() 
                                        if not check["healthy"]]
                        print(f"      ‚ùå Failing: {', '.join(failing_checks)}")
                
                await asyncio.sleep(self.check_interval)
            
            return monitoring_results
    
    monitor = HealthMonitor()
    services = ["connector", "pipeline", "dashboard"]
    
    # Ejecutar monitoreo
    results = asyncio.run(monitor.monitor_services(services, duration=3))
    
    # Analizar resultados
    unhealthy_count = sum(1 for r in results if r["status"] == "unhealthy")
    services_with_issues = set(r["service"] for r in results if r["status"] == "unhealthy")
    
    print(f"\nüìä Resumen de monitoreo:")
    print(f"   - Total health checks: {len(results)}")
    print(f"   - Checks no saludables: {unhealthy_count}")
    print(f"   - Servicios con problemas: {', '.join(services_with_issues) if services_with_issues else 'Ninguno'}")
    
    # Verificar que el monitoreo funciona
    assert len(results) == 9  # 3 servicios x 3 rounds
    assert any(r["overall_health"] < 1.0 for r in results)  # Al menos alg√∫n problema detectado


def test_state_synchronization_after_restart():
    """Test: Sincronizaci√≥n de estado despu√©s de reinicio"""
    
    print("\nüîÑ Test: Sincronizaci√≥n de estado post-reinicio\n")
    
    class StateSynchronizer:
        def __init__(self):
            self.global_state = {
                "last_processed_article": "art-100",
                "processing_queue": ["art-101", "art-102", "art-103"],
                "completed_today": 245,
                "last_sync": datetime.utcnow()
            }
            self.service_states = {}
            
        def save_service_state(self, service: str, state: dict):
            """Guarda estado de un servicio antes de ca√≠da"""
            self.service_states[service] = {
                "state": state,
                "saved_at": datetime.utcnow()
            }
            print(f"üíæ Estado guardado para {service}")
            
        def restore_service_state(self, service: str) -> dict:
            """Restaura estado de un servicio despu√©s de reinicio"""
            if service in self.service_states:
                saved = self.service_states[service]
                age = (datetime.utcnow() - saved["saved_at"]).total_seconds()
                
                if age < 300:  # Estado v√°lido por 5 minutos
                    print(f"‚ôªÔ∏è Estado restaurado para {service} (edad: {age:.0f}s)")
                    return saved["state"]
                else:
                    print(f"‚ö†Ô∏è Estado expirado para {service} (edad: {age:.0f}s)")
            
            return None
            
        async def sync_with_global_state(self, service: str, local_state: dict) -> dict:
            """Sincroniza estado local con estado global"""
            print(f"\nüîÑ Sincronizando {service} con estado global...")
            
            # Detectar diferencias
            differences = []
            
            if "last_processed" in local_state:
                local_last = local_state["last_processed"]
                global_last = self.global_state["last_processed_article"]
                
                if local_last != global_last:
                    differences.append(f"last_processed: {local_last} ‚Üí {global_last}")
                    local_state["last_processed"] = global_last
            
            if "queue" in local_state:
                local_queue = set(local_state["queue"])
                global_queue = set(self.global_state["processing_queue"])
                
                missing = global_queue - local_queue
                extra = local_queue - global_queue
                
                if missing:
                    differences.append(f"queue: +{len(missing)} items")
                    local_state["queue"].extend(missing)
                
                if extra:
                    differences.append(f"queue: -{len(extra)} items")
                    local_state["queue"] = [q for q in local_state["queue"] if q in global_queue]
            
            if differences:
                print(f"   üìù Diferencias encontradas: {', '.join(differences)}")
            else:
                print(f"   ‚úÖ Estado ya sincronizado")
            
            return local_state
    
    sync = StateSynchronizer()
    
    # Simular estado del Connector antes de caer
    connector_state = {
        "last_processed": "art-098",  # Desactualizado
        "queue": ["art-101", "art-102"],  # Falta art-103
        "files_processed": 50
    }
    
    # 1. Guardar estado antes de ca√≠da
    print("1Ô∏è‚É£ Connector a punto de caer - guardando estado...")
    sync.save_service_state("connector", connector_state)
    
    # 2. Simular ca√≠da y reinicio
    print("\n2Ô∏è‚É£ Connector reiniciando...")
    time.sleep(1)  # Simular tiempo de reinicio
    
    # 3. Restaurar estado
    restored_state = sync.restore_service_state("connector")
    assert restored_state is not None
    print(f"   üìÇ Estado local restaurado: {restored_state}")
    
    # 4. Sincronizar con estado global
    synced_state = asyncio.run(sync.sync_with_global_state("connector", restored_state))
    
    print(f"\nüìä Estado final sincronizado:")
    print(f"   - last_processed: {synced_state['last_processed']}")
    print(f"   - queue: {synced_state['queue']}")
    print(f"   - files_processed: {synced_state['files_processed']}")
    
    # Verificaciones
    assert synced_state["last_processed"] == "art-100"
    assert len(synced_state["queue"]) == 3
    assert "art-103" in synced_state["queue"]


def test_graceful_shutdown_and_startup():
    """Test: Apagado y arranque elegante de servicios"""
    
    print("\nüéØ Test: Apagado y arranque elegante\n")
    
    class GracefulService:
        def __init__(self, name: str):
            self.name = name
            self.active_connections = []
            self.pending_tasks = []
            self.shutdown_timeout = 30  # segundos
            
        async def shutdown_gracefully(self) -> dict:
            """Apagado elegante del servicio"""
            print(f"\nüõë Iniciando apagado elegante de {self.name}...")
            
            shutdown_steps = []
            
            # 1. Dejar de aceptar nuevas conexiones
            print("   1Ô∏è‚É£ Dejando de aceptar nuevas conexiones")
            shutdown_steps.append("stopped_accepting")
            
            # 2. Completar tareas en progreso
            if self.pending_tasks:
                print(f"   2Ô∏è‚É£ Completando {len(self.pending_tasks)} tareas pendientes...")
                completed = 0
                for task in self.pending_tasks[:]:  # Copiar lista
                    # Simular completar tarea
                    await asyncio.sleep(0.1)
                    self.pending_tasks.remove(task)
                    completed += 1
                    
                print(f"      ‚úÖ {completed} tareas completadas")
                shutdown_steps.append("tasks_completed")
            
            # 3. Cerrar conexiones activas
            if self.active_connections:
                print(f"   3Ô∏è‚É£ Cerrando {len(self.active_connections)} conexiones activas...")
                for conn in self.active_connections[:]:
                    self.active_connections.remove(conn)
                shutdown_steps.append("connections_closed")
            
            # 4. Guardar estado
            print("   4Ô∏è‚É£ Guardando estado final...")
            final_state = {
                "shutdown_time": datetime.utcnow().isoformat(),
                "pending_tasks_saved": len(self.pending_tasks),
                "graceful": True
            }
            shutdown_steps.append("state_saved")
            
            print(f"   ‚úÖ {self.name} apagado elegantemente")
            
            return {
                "steps_completed": shutdown_steps,
                "final_state": final_state
            }
        
        async def startup_with_recovery(self, previous_state: dict = None) -> dict:
            """Arranque con recuperaci√≥n de estado previo"""
            print(f"\nüöÄ Iniciando {self.name}...")
            
            startup_steps = []
            
            # 1. Cargar configuraci√≥n
            print("   1Ô∏è‚É£ Cargando configuraci√≥n...")
            startup_steps.append("config_loaded")
            
            # 2. Restaurar estado si existe
            if previous_state and previous_state.get("graceful"):
                print("   2Ô∏è‚É£ Detectado apagado elegante previo - restaurando estado...")
                if previous_state.get("pending_tasks_saved", 0) > 0:
                    print(f"      üìã Recuperando {previous_state['pending_tasks_saved']} tareas pendientes")
                startup_steps.append("state_restored")
            else:
                print("   2Ô∏è‚É£ Sin estado previo o apagado no fue elegante - inicio limpio")
                startup_steps.append("clean_start")
            
            # 3. Inicializar conexiones
            print("   3Ô∏è‚É£ Inicializando pool de conexiones...")
            await asyncio.sleep(0.2)  # Simular inicializaci√≥n
            startup_steps.append("connections_initialized")
            
            # 4. Comenzar a aceptar requests
            print("   4Ô∏è‚É£ Listo para aceptar requests")
            startup_steps.append("accepting_requests")
            
            print(f"   ‚úÖ {self.name} iniciado correctamente")
            
            return {
                "steps_completed": startup_steps,
                "ready": True
            }
    
    # Simular ciclo completo
    service = GracefulService("TestService")
    
    # Agregar trabajo activo
    service.pending_tasks = ["task1", "task2", "task3"]
    service.active_connections = ["conn1", "conn2"]
    
    # Apagado elegante
    shutdown_result = asyncio.run(service.shutdown_gracefully())
    
    # Verificar apagado completo
    assert len(shutdown_result["steps_completed"]) == 4
    assert shutdown_result["final_state"]["graceful"] is True
    
    # Simular reinicio
    print("\n" + "="*50)
    
    # Arranque con recuperaci√≥n
    startup_result = asyncio.run(
        service.startup_with_recovery(shutdown_result["final_state"])
    )
    
    # Verificar arranque exitoso
    assert startup_result["ready"] is True
    assert "state_restored" in startup_result["steps_completed"]
    
    print("\n‚úÖ Ciclo completo de apagado/arranque elegante completado")


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
